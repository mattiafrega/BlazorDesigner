//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslModeling
{
	/// <summary>
	/// DomainClass ExampleModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslModeling.ExampleModel.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslModeling.ExampleModel.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslModeling.MyDslModelingDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4efe497b-a0b3-499c-9fa7-8b667d23cd54")]
	public partial class ExampleModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExampleModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4efe497b, 0xa0b3, 0x499c, 0x9f, 0xa7, 0x8b, 0x66, 0x7d, 0x23, 0xcd, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyObject> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyObject>, MyObject>(global::Company.MyDslModeling.ExampleModelHasElements.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region MySecondObject opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MySecondObject.
		/// Description for Company.MyDslModeling.ExampleModelHasMySecondObject.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MySecondObject> MySecondObject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MySecondObject>, MySecondObject>(global::Company.MyDslModeling.ExampleModelHasMySecondObject.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslModeling.MyObject.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslModeling.MySecondObject.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslModeling.MyObject sourceMyObject1 = sourceElement as global::Company.MyDslModeling.MyObject;
			if (sourceMyObject1 != null)
			{
				// Create link for path ExampleModelHasElements.Elements
				this.Elements.Add(sourceMyObject1);

				return;
			}
				
			global::Company.MyDslModeling.MySecondObject sourceMySecondObject2 = sourceElement as global::Company.MyDslModeling.MySecondObject;
			if (sourceMySecondObject2 != null)
			{
				// Create link for path ExampleModelHasMySecondObject.MySecondObject
				this.MySecondObject.Add(sourceMySecondObject2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslModeling.MyObject sourceMyObject1 = sourceElement as global::Company.MyDslModeling.MyObject;
			if (sourceMyObject1 != null)
			{
				// Delete link for path ExampleModelHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslModeling.ExampleModelHasElements.GetLinks((global::Company.MyDslModeling.ExampleModel)this, sourceMyObject1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslModeling.ExampleModelHasElements.ExampleModelDomainRoleId, global::Company.MyDslModeling.ExampleModelHasElements.ElementDomainRoleId);
				}

				return;
			}
				
			global::Company.MyDslModeling.MySecondObject sourceMySecondObject2 = sourceElement as global::Company.MyDslModeling.MySecondObject;
			if (sourceMySecondObject2 != null)
			{
				// Delete link for path ExampleModelHasMySecondObject.MySecondObject
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslModeling.ExampleModelHasMySecondObject.GetLinks((global::Company.MyDslModeling.ExampleModel)this, sourceMySecondObject2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslModeling.ExampleModelHasMySecondObject.ExampleModelDomainRoleId, global::Company.MyDslModeling.ExampleModelHasMySecondObject.MySecondObjectDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslModeling
{
	/// <summary>
	/// DomainClass MyObject
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslModeling.MyObject.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslModeling.MyObject.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslModeling.MyDslModelingDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("cbcfee31-40eb-4aa3-a2ad-9c475a779717")]
	public partial class MyObject : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyObject domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcbcfee31, 0x40eb, 0x4aa3, 0xa2, 0xad, 0x9c, 0x47, 0x5a, 0x77, 0x97, 0x17);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyObject(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyObject(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3e1af7e0, 0x4dad, 0x485a, 0x88, 0xe9, 0xe6, 0x65, 0xd8, 0x44, 0x43, 0x48);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDslModeling.MyObject.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslModeling.MyObject/Name.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslModeling.MyObject/Name.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3e1af7e0-4dad-485a-88e9-e665d8444348")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyObject.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyObject, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyObject.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyObject.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyObject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyObject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Caption domain property code
		
		/// <summary>
		/// Caption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CaptionDomainPropertyId = new global::System.Guid(0x1d5acc19, 0xe4d4, 0x46dc, 0xa8, 0xfa, 0x62, 0x85, 0xa7, 0xe1, 0x24, 0x53);
		
		/// <summary>
		/// Storage for Caption
		/// </summary>
		private global::System.String captionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Caption domain property.
		/// Description for Company.MyDslModeling.MyObject.Caption
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslModeling.MyObject/Caption.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslModeling.MyObject/Caption.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("1d5acc19-e4d4-46dc-a8fa-6285a7e12453")]
		public global::System.String Caption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return captionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CaptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyObject.Caption domain property.
		/// </summary>
		internal sealed partial class CaptionPropertyHandler : DslModeling::DomainPropertyValueHandler<MyObject, global::System.String>
		{
			private CaptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyObject.Caption domain property value handler.
			/// </summary>
			public static readonly CaptionPropertyHandler Instance = new CaptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyObject.Caption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CaptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyObject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.captionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyObject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.captionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslModeling.ExampleModelHasElements.ElementDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslModeling.ExampleModelHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDslModeling
{
	/// <summary>
	/// DomainClass MySecondObject
	/// Description for Company.MyDslModeling.MySecondObject
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslModeling.MySecondObject.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslModeling.MySecondObject.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslModeling.MyDslModelingDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a33e6af1-f244-449e-bfa5-693fad6dcbf0")]
	public partial class MySecondObject : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MySecondObject domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa33e6af1, 0xf244, 0x449e, 0xbf, 0xa5, 0x69, 0x3f, 0xad, 0x6d, 0xcb, 0xf0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MySecondObject(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MySecondObject(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xfee504a5, 0x775b, 0x45c8, 0x81, 0x65, 0x7c, 0x1e, 0x05, 0x5c, 0xfb, 0x4c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDslModeling.MySecondObject.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslModeling.MySecondObject/Name.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslModeling.MySecondObject/Name.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fee504a5-775b-45c8-8165-7c1e055cfb4c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MySecondObject.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MySecondObject, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MySecondObject.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MySecondObject.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MySecondObject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MySecondObject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Caption domain property code
		
		/// <summary>
		/// Caption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CaptionDomainPropertyId = new global::System.Guid(0x36dafbc1, 0x4333, 0x40d3, 0xae, 0xbe, 0xf6, 0x5d, 0x27, 0xc2, 0x78, 0x13);
		
		/// <summary>
		/// Storage for Caption
		/// </summary>
		private global::System.String captionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Caption domain property.
		/// Description for Company.MyDslModeling.MySecondObject.Caption
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslModeling.MySecondObject/Caption.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslModeling.MySecondObject/Caption.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("36dafbc1-4333-40d3-aebe-f65d27c27813")]
		public global::System.String Caption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return captionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CaptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MySecondObject.Caption domain property.
		/// </summary>
		internal sealed partial class CaptionPropertyHandler : DslModeling::DomainPropertyValueHandler<MySecondObject, global::System.String>
		{
			private CaptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MySecondObject.Caption domain property value handler.
			/// </summary>
			public static readonly CaptionPropertyHandler Instance = new CaptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MySecondObject.Caption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CaptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MySecondObject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.captionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MySecondObject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.captionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Title domain property code
		
		/// <summary>
		/// Title domain property Id.
		/// </summary>
		public static readonly global::System.Guid TitleDomainPropertyId = new global::System.Guid(0x491e7842, 0xed34, 0x40a9, 0xa4, 0x3d, 0x83, 0x52, 0x17, 0x84, 0x78, 0x8f);
		
		/// <summary>
		/// Storage for Title
		/// </summary>
		private global::System.String titlePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Title domain property.
		/// Description for Company.MyDslModeling.MySecondObject.Title
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslModeling.MySecondObject/Title.DisplayName", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslModeling.MySecondObject/Title.Description", typeof(global::Company.MyDslModeling.MyDslModelingDomainModel), "Company.MyDslModeling.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("491e7842-ed34-40a9-a43d-83521784788f")]
		public global::System.String Title
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return titlePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TitlePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MySecondObject.Title domain property.
		/// </summary>
		internal sealed partial class TitlePropertyHandler : DslModeling::DomainPropertyValueHandler<MySecondObject, global::System.String>
		{
			private TitlePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MySecondObject.Title domain property value handler.
			/// </summary>
			public static readonly TitlePropertyHandler Instance = new TitlePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MySecondObject.Title domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TitleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MySecondObject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.titlePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MySecondObject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.titlePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for
		/// Company.MyDslModeling.ExampleModelHasMySecondObject.MySecondObject
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslModeling.ExampleModelHasMySecondObject.MySecondObjectDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslModeling.ExampleModelHasMySecondObject.MySecondObjectDomainRoleId, value);
			}
		}
		#endregion
	}
}
