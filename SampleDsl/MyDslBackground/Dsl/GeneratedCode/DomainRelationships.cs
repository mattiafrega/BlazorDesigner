//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship ExampleModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.ExampleModelHasElements.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.ExampleModelHasElements.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("310d0662-09bf-4a42-8d6d-4da17e6e95bb")]
	public partial class ExampleModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x310d0662, 0x09bf, 0x4a42, 0x8d, 0x6d, 0x4d, 0xa1, 0x7e, 0x6e, 0x95, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasElements link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">MyPanel to use as the target of the relationship.</param>
		public ExampleModelHasElements(ExampleModel source, MyPanel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasElements.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0xf9a56fc8, 0x97f6, 0x4648, 0xb3, 0x62, 0x17, 0x4a, 0x6a, 0x00, 0x10, 0x38);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.ExampleModelHasElements/ExampleModel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.ExampleModelHasElements/ExampleModel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.MyDSL.ExampleModelHasElements/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f9a56fc8-97f6-4648-b362-174a6a001038")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a MyPanel
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(MyPanel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(MyPanel element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newExampleModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x9fe16396, 0x628d, 0x4fbb, 0xbb, 0x06, 0x62, 0x1b, 0xae, 0x01, 0xeb, 0xf2);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.ExampleModelHasElements/Element.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.ExampleModelHasElements/Element.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.MyDSL.ExampleModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9fe16396-628d-4fbb-bb06-621bae01ebf2")]
		public virtual MyPanel Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a ExampleModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetElements(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasElements links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.ExampleModelHasElements> GetLinksToElements ( global::Company.MyDSL.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasElements>(exampleModelInstance, global::Company.MyDSL.ExampleModelHasElements.ExampleModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ExampleModelHasElements link to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.ExampleModelHasElements GetLinkToExampleModel (global::Company.MyDSL.MyPanel elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasElements>(elementInstance, global::Company.MyDSL.ExampleModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasElements instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasElements links between a given ExampleModel and a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.ExampleModelHasElements> GetLinks( global::Company.MyDSL.ExampleModel source, global::Company.MyDSL.MyPanel target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.ExampleModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.ExampleModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasElements>(source, global::Company.MyDSL.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDSL.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasElements link between a given ExampleModeland a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.ExampleModelHasElements GetLink( global::Company.MyDSL.ExampleModel source, global::Company.MyDSL.MyPanel target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasElements>(source, global::Company.MyDSL.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDSL.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship ExampleModelHasSwim
	/// Description for Company.MyDSL.ExampleModelHasSwim
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.ExampleModelHasSwim.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.ExampleModelHasSwim.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2668646f-4091-49ce-b95d-12d82bd0f69c")]
	public partial class ExampleModelHasSwim : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasSwim domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2668646f, 0x4091, 0x49ce, 0xb9, 0x5d, 0x12, 0xd8, 0x2b, 0xd0, 0xf6, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasSwim link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">Swim to use as the target of the relationship.</param>
		public ExampleModelHasSwim(ExampleModel source, Swim target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasSwim.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasSwim.SwimDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasSwim(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasSwim(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasSwim(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasSwim(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0x8fba8cf2, 0xfa8e, 0x40ea, 0xbb, 0x6d, 0x69, 0x8b, 0x2f, 0x68, 0x3f, 0x44);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// Description for Company.MyDSL.ExampleModelHasSwim.ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.ExampleModelHasSwim/ExampleModel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.ExampleModelHasSwim/ExampleModel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Swim", PropertyDisplayNameKey="Company.MyDSL.ExampleModelHasSwim/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8fba8cf2-fa8e-40ea-bb6d-698b2f683f44")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a Swim
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(Swim element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SwimDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(Swim element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SwimDomainRoleId, newExampleModel);
		}
		#endregion
		#region Swim domain role code
		
		/// <summary>
		/// Swim domain role Id.
		/// </summary>
		public static readonly global::System.Guid SwimDomainRoleId = new global::System.Guid(0x301b1803, 0xd185, 0x405e, 0x84, 0xc2, 0xf4, 0x92, 0x6d, 0xc4, 0x1d, 0x35);
		
		/// <summary>
		/// DomainRole Swim
		/// Description for Company.MyDSL.ExampleModelHasSwim.Swim
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.ExampleModelHasSwim/Swim.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.ExampleModelHasSwim/Swim.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.MyDSL.ExampleModelHasSwim/Swim.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("301b1803-d185-405e-84c2-f4926dc41d35")]
		public virtual Swim Swim
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Swim)DslModeling::DomainRoleInfo.GetRolePlayer(this, SwimDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SwimDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Swim of a ExampleModel
		/// <summary>
		/// Gets a list of Swim.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Swim> GetSwim(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Swim>, Swim>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasSwim links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.ExampleModelHasSwim> GetLinksToSwim ( global::Company.MyDSL.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasSwim>(exampleModelInstance, global::Company.MyDSL.ExampleModelHasSwim.ExampleModelDomainRoleId);
		}
		#endregion
		#region Swim link accessor
		/// <summary>
		/// Get the ExampleModelHasSwim link to a Swim.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.ExampleModelHasSwim GetLinkToExampleModel (global::Company.MyDSL.Swim swimInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.ExampleModelHasSwim> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasSwim>(swimInstance, global::Company.MyDSL.ExampleModelHasSwim.SwimDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Swim not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasSwim instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasSwim links between a given ExampleModel and a Swim.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.ExampleModelHasSwim> GetLinks( global::Company.MyDSL.ExampleModel source, global::Company.MyDSL.Swim target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.ExampleModelHasSwim> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.ExampleModelHasSwim>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.ExampleModelHasSwim> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasSwim>(source, global::Company.MyDSL.ExampleModelHasSwim.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDSL.ExampleModelHasSwim link in links )
			{
				if ( target.Equals(link.Swim) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasSwim link between a given ExampleModeland a Swim.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.ExampleModelHasSwim GetLink( global::Company.MyDSL.ExampleModel source, global::Company.MyDSL.Swim target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.ExampleModelHasSwim> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.ExampleModelHasSwim>(source, global::Company.MyDSL.ExampleModelHasSwim.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDSL.ExampleModelHasSwim link in links )
			{
				if ( target.Equals(link.Swim) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship MyPanelReferencesMyButton
	/// Description for Company.MyDSL.MyPanelReferencesMyButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyButton.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyButton.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a1171cfc-faff-4e67-a0ee-fc7417e15007")]
	public partial class MyPanelReferencesMyButton : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyPanelReferencesMyButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa1171cfc, 0xfaff, 0x4e67, 0xa0, 0xee, 0xfc, 0x74, 0x17, 0xe1, 0x50, 0x07);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyPanelReferencesMyButton link in the same Partition as the given MyPanel
		/// </summary>
		/// <param name="source">MyPanel to use as the source of the relationship.</param>
		/// <param name="target">MyButton to use as the target of the relationship.</param>
		public MyPanelReferencesMyButton(MyPanel source, MyButton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyPanelReferencesMyButton.MyPanelDomainRoleId, source), new DslModeling::RoleAssignment(MyPanelReferencesMyButton.MyButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyButton(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyButton(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyButton(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyButton(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyPanel domain role code
		
		/// <summary>
		/// MyPanel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyPanelDomainRoleId = new global::System.Guid(0xa5770945, 0x1a2b, 0x4b30, 0xaa, 0x5e, 0xa8, 0x25, 0x93, 0x64, 0x91, 0x7c);
		
		/// <summary>
		/// DomainRole MyPanel
		/// Description for Company.MyDSL.MyPanelReferencesMyButton.MyPanel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyButton/MyPanel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyButton/MyPanel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyButton", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyButton/MyPanel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a5770945-1a2b-4b30-aa5e-a8259364917c")]
		public virtual MyPanel MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyPanelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyPanelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyPanel of a MyButton
		/// <summary>
		/// Gets a list of MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetMyPanel(MyButton element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, MyButtonDomainRoleId);
		}
		#endregion
		#region MyButton domain role code
		
		/// <summary>
		/// MyButton domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyButtonDomainRoleId = new global::System.Guid(0xf1784681, 0xcea8, 0x4e71, 0x87, 0x67, 0xef, 0x53, 0x9c, 0x28, 0x22, 0x3a);
		
		/// <summary>
		/// DomainRole MyButton
		/// Description for Company.MyDSL.MyPanelReferencesMyButton.MyButton
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyButton/MyButton.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyButton/MyButton.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyPanel", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyButton/MyButton.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f1784681-cea8-4e71-8767-ef539c28223a")]
		public virtual MyButton MyButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyButton)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyButton of a MyPanel
		/// <summary>
		/// Gets a list of MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyButton> GetMyButton(MyPanel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyButton>, MyButton>(element, MyPanelDomainRoleId);
		}
		#endregion
		#region MyPanel link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyButton links to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyButton> GetLinksToMyButton ( global::Company.MyDSL.MyPanel myPanelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyButton>(myPanelInstance, global::Company.MyDSL.MyPanelReferencesMyButton.MyPanelDomainRoleId);
		}
		#endregion
		#region MyButton link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyButton links to a MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyButton> GetLinksToMyPanel ( global::Company.MyDSL.MyButton myButtonInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyButton>(myButtonInstance, global::Company.MyDSL.MyPanelReferencesMyButton.MyButtonDomainRoleId);
		}
		#endregion
		#region MyPanelReferencesMyButton instance accessors
		
		/// <summary>
		/// Get any MyPanelReferencesMyButton links between a given MyPanel and a MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyButton> GetLinks( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyButton target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyButton> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyButton>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyButton>(source, global::Company.MyDSL.MyPanelReferencesMyButton.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyButton link in links )
			{
				if ( target.Equals(link.MyButton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyPanelReferencesMyButton link between a given MyPaneland a MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.MyPanelReferencesMyButton GetLink( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyButton target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyButton>(source, global::Company.MyDSL.MyPanelReferencesMyButton.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyButton link in links )
			{
				if ( target.Equals(link.MyButton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship MyPanelReferencesMyInput
	/// Description for Company.MyDSL.MyPanelReferencesMyInput
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyInput.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyInput.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0f5ec667-ea20-4d2d-a972-996be8a3440f")]
	public partial class MyPanelReferencesMyInput : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyPanelReferencesMyInput domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f5ec667, 0xea20, 0x4d2d, 0xa9, 0x72, 0x99, 0x6b, 0xe8, 0xa3, 0x44, 0x0f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyPanelReferencesMyInput link in the same Partition as the given MyPanel
		/// </summary>
		/// <param name="source">MyPanel to use as the source of the relationship.</param>
		/// <param name="target">MyInput to use as the target of the relationship.</param>
		public MyPanelReferencesMyInput(MyPanel source, MyInput target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyPanelReferencesMyInput.MyPanelDomainRoleId, source), new DslModeling::RoleAssignment(MyPanelReferencesMyInput.MyInputDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyInput(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyInput(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyInput(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyInput(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyPanel domain role code
		
		/// <summary>
		/// MyPanel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyPanelDomainRoleId = new global::System.Guid(0xaffb801b, 0xe7f1, 0x4038, 0xb4, 0x28, 0x50, 0x73, 0xdb, 0x2d, 0x48, 0x3e);
		
		/// <summary>
		/// DomainRole MyPanel
		/// Description for Company.MyDSL.MyPanelReferencesMyInput.MyPanel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyInput/MyPanel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyInput/MyPanel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyInput", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyInput/MyPanel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("affb801b-e7f1-4038-b428-5073db2d483e")]
		public virtual MyPanel MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyPanelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyPanelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyPanel of a MyInput
		/// <summary>
		/// Gets a list of MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetMyPanel(MyInput element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, MyInputDomainRoleId);
		}
		#endregion
		#region MyInput domain role code
		
		/// <summary>
		/// MyInput domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyInputDomainRoleId = new global::System.Guid(0x8e55a3f8, 0xc841, 0x41a9, 0xac, 0x18, 0x36, 0xad, 0xd3, 0xcb, 0x9b, 0x9f);
		
		/// <summary>
		/// DomainRole MyInput
		/// Description for Company.MyDSL.MyPanelReferencesMyInput.MyInput
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyInput/MyInput.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyInput/MyInput.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyPanel", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyInput/MyInput.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8e55a3f8-c841-41a9-ac18-36add3cb9b9f")]
		public virtual MyInput MyInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyInput)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyInputDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyInputDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyInput of a MyPanel
		/// <summary>
		/// Gets a list of MyInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyInput> GetMyInput(MyPanel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyInput>, MyInput>(element, MyPanelDomainRoleId);
		}
		#endregion
		#region MyPanel link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyInput links to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyInput> GetLinksToMyInput ( global::Company.MyDSL.MyPanel myPanelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyInput>(myPanelInstance, global::Company.MyDSL.MyPanelReferencesMyInput.MyPanelDomainRoleId);
		}
		#endregion
		#region MyInput link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyInput links to a MyInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyInput> GetLinksToMyPanel ( global::Company.MyDSL.MyInput myInputInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyInput>(myInputInstance, global::Company.MyDSL.MyPanelReferencesMyInput.MyInputDomainRoleId);
		}
		#endregion
		#region MyPanelReferencesMyInput instance accessors
		
		/// <summary>
		/// Get any MyPanelReferencesMyInput links between a given MyPanel and a MyInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyInput> GetLinks( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyInput target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyInput> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyInput>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyInput> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyInput>(source, global::Company.MyDSL.MyPanelReferencesMyInput.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyInput link in links )
			{
				if ( target.Equals(link.MyInput) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyPanelReferencesMyInput link between a given MyPaneland a MyInput.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.MyPanelReferencesMyInput GetLink( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyInput target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyInput> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyInput>(source, global::Company.MyDSL.MyPanelReferencesMyInput.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyInput link in links )
			{
				if ( target.Equals(link.MyInput) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship MyPanelReferencesMyCart
	/// Description for Company.MyDSL.MyPanelReferencesMyCart
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyCart.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyCart.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("05cdbd6c-a70f-44c8-a3cb-508491f83920")]
	public partial class MyPanelReferencesMyCart : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyPanelReferencesMyCart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05cdbd6c, 0xa70f, 0x44c8, 0xa3, 0xcb, 0x50, 0x84, 0x91, 0xf8, 0x39, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyPanelReferencesMyCart link in the same Partition as the given MyPanel
		/// </summary>
		/// <param name="source">MyPanel to use as the source of the relationship.</param>
		/// <param name="target">MyCart to use as the target of the relationship.</param>
		public MyPanelReferencesMyCart(MyPanel source, MyCart target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyPanelReferencesMyCart.MyPanelDomainRoleId, source), new DslModeling::RoleAssignment(MyPanelReferencesMyCart.MyCartDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyCart(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyCart(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyCart(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyCart(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyPanel domain role code
		
		/// <summary>
		/// MyPanel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyPanelDomainRoleId = new global::System.Guid(0xd490b632, 0xc412, 0x4a47, 0xae, 0x1c, 0x82, 0x84, 0xa2, 0x04, 0x93, 0x0c);
		
		/// <summary>
		/// DomainRole MyPanel
		/// Description for Company.MyDSL.MyPanelReferencesMyCart.MyPanel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyCart/MyPanel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyCart/MyPanel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyCart", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyCart/MyPanel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d490b632-c412-4a47-ae1c-8284a204930c")]
		public virtual MyPanel MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyPanelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyPanelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyPanel of a MyCart
		/// <summary>
		/// Gets a list of MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetMyPanel(MyCart element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, MyCartDomainRoleId);
		}
		#endregion
		#region MyCart domain role code
		
		/// <summary>
		/// MyCart domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyCartDomainRoleId = new global::System.Guid(0x4b95f0e9, 0xdcc2, 0x478c, 0xac, 0xa7, 0xac, 0x9c, 0xc8, 0x82, 0x57, 0xe6);
		
		/// <summary>
		/// DomainRole MyCart
		/// Description for Company.MyDSL.MyPanelReferencesMyCart.MyCart
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyCart/MyCart.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyCart/MyCart.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyPanel", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyCart/MyCart.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4b95f0e9-dcc2-478c-aca7-ac9cc88257e6")]
		public virtual MyCart MyCart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyCart)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyCartDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyCartDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyCart of a MyPanel
		/// <summary>
		/// Gets a list of MyCart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyCart> GetMyCart(MyPanel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyCart>, MyCart>(element, MyPanelDomainRoleId);
		}
		#endregion
		#region MyPanel link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyCart links to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyCart> GetLinksToMyCart ( global::Company.MyDSL.MyPanel myPanelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyCart>(myPanelInstance, global::Company.MyDSL.MyPanelReferencesMyCart.MyPanelDomainRoleId);
		}
		#endregion
		#region MyCart link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyCart links to a MyCart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyCart> GetLinksToMyPanel ( global::Company.MyDSL.MyCart myCartInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyCart>(myCartInstance, global::Company.MyDSL.MyPanelReferencesMyCart.MyCartDomainRoleId);
		}
		#endregion
		#region MyPanelReferencesMyCart instance accessors
		
		/// <summary>
		/// Get any MyPanelReferencesMyCart links between a given MyPanel and a MyCart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyCart> GetLinks( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyCart target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyCart> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyCart>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyCart> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyCart>(source, global::Company.MyDSL.MyPanelReferencesMyCart.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyCart link in links )
			{
				if ( target.Equals(link.MyCart) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyPanelReferencesMyCart link between a given MyPaneland a MyCart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.MyPanelReferencesMyCart GetLink( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyCart target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyCart> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyCart>(source, global::Company.MyDSL.MyPanelReferencesMyCart.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyCart link in links )
			{
				if ( target.Equals(link.MyCart) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship MyPanelReferencesMySetting
	/// Description for Company.MyDSL.MyPanelReferencesMySetting
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMySetting.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMySetting.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("149292ff-2312-459b-aa42-0a60008bed49")]
	public partial class MyPanelReferencesMySetting : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyPanelReferencesMySetting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x149292ff, 0x2312, 0x459b, 0xaa, 0x42, 0x0a, 0x60, 0x00, 0x8b, 0xed, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyPanelReferencesMySetting link in the same Partition as the given MyPanel
		/// </summary>
		/// <param name="source">MyPanel to use as the source of the relationship.</param>
		/// <param name="target">MySetting to use as the target of the relationship.</param>
		public MyPanelReferencesMySetting(MyPanel source, MySetting target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyPanelReferencesMySetting.MyPanelDomainRoleId, source), new DslModeling::RoleAssignment(MyPanelReferencesMySetting.MySettingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMySetting(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMySetting(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMySetting(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMySetting(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyPanel domain role code
		
		/// <summary>
		/// MyPanel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyPanelDomainRoleId = new global::System.Guid(0x3250bc33, 0x5ef8, 0x4fb5, 0x9a, 0x01, 0xdd, 0x59, 0x32, 0x56, 0xba, 0x42);
		
		/// <summary>
		/// DomainRole MyPanel
		/// Description for Company.MyDSL.MyPanelReferencesMySetting.MyPanel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMySetting/MyPanel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMySetting/MyPanel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MySetting", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMySetting/MyPanel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3250bc33-5ef8-4fb5-9a01-dd593256ba42")]
		public virtual MyPanel MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyPanelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyPanelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyPanel of a MySetting
		/// <summary>
		/// Gets a list of MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetMyPanel(MySetting element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, MySettingDomainRoleId);
		}
		#endregion
		#region MySetting domain role code
		
		/// <summary>
		/// MySetting domain role Id.
		/// </summary>
		public static readonly global::System.Guid MySettingDomainRoleId = new global::System.Guid(0xa655230f, 0x3204, 0x45ce, 0xb2, 0xd0, 0x9d, 0x0b, 0xcc, 0x6d, 0x4a, 0xbc);
		
		/// <summary>
		/// DomainRole MySetting
		/// Description for Company.MyDSL.MyPanelReferencesMySetting.MySetting
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMySetting/MySetting.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMySetting/MySetting.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyPanel", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMySetting/MySetting.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a655230f-3204-45ce-b2d0-9d0bcc6d4abc")]
		public virtual MySetting MySetting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MySetting)DslModeling::DomainRoleInfo.GetRolePlayer(this, MySettingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MySettingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MySetting of a MyPanel
		/// <summary>
		/// Gets a list of MySetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MySetting> GetMySetting(MyPanel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MySetting>, MySetting>(element, MyPanelDomainRoleId);
		}
		#endregion
		#region MyPanel link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMySetting links to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMySetting> GetLinksToMySetting ( global::Company.MyDSL.MyPanel myPanelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMySetting>(myPanelInstance, global::Company.MyDSL.MyPanelReferencesMySetting.MyPanelDomainRoleId);
		}
		#endregion
		#region MySetting link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMySetting links to a MySetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMySetting> GetLinksToMyPanel ( global::Company.MyDSL.MySetting mySettingInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMySetting>(mySettingInstance, global::Company.MyDSL.MyPanelReferencesMySetting.MySettingDomainRoleId);
		}
		#endregion
		#region MyPanelReferencesMySetting instance accessors
		
		/// <summary>
		/// Get any MyPanelReferencesMySetting links between a given MyPanel and a MySetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMySetting> GetLinks( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MySetting target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMySetting> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMySetting>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMySetting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMySetting>(source, global::Company.MyDSL.MyPanelReferencesMySetting.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMySetting link in links )
			{
				if ( target.Equals(link.MySetting) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyPanelReferencesMySetting link between a given MyPaneland a MySetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.MyPanelReferencesMySetting GetLink( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MySetting target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMySetting> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMySetting>(source, global::Company.MyDSL.MyPanelReferencesMySetting.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMySetting link in links )
			{
				if ( target.Equals(link.MySetting) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship MyPanelReferencesMyWiFi
	/// Description for Company.MyDSL.MyPanelReferencesMyWiFi
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyWiFi.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyWiFi.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f4301932-8e99-4498-a4c2-ba931647da05")]
	public partial class MyPanelReferencesMyWiFi : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyPanelReferencesMyWiFi domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4301932, 0x8e99, 0x4498, 0xa4, 0xc2, 0xba, 0x93, 0x16, 0x47, 0xda, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyPanelReferencesMyWiFi link in the same Partition as the given MyPanel
		/// </summary>
		/// <param name="source">MyPanel to use as the source of the relationship.</param>
		/// <param name="target">MyWiFi to use as the target of the relationship.</param>
		public MyPanelReferencesMyWiFi(MyPanel source, MyWiFi target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyPanelReferencesMyWiFi.MyPanelDomainRoleId, source), new DslModeling::RoleAssignment(MyPanelReferencesMyWiFi.MyWiFiDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyWiFi(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyWiFi(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyWiFi(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyWiFi(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyPanel domain role code
		
		/// <summary>
		/// MyPanel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyPanelDomainRoleId = new global::System.Guid(0x78ee917b, 0x1d68, 0x4c39, 0x91, 0x92, 0x19, 0xc0, 0xee, 0xc2, 0x71, 0x1b);
		
		/// <summary>
		/// DomainRole MyPanel
		/// Description for Company.MyDSL.MyPanelReferencesMyWiFi.MyPanel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyWiFi/MyPanel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyWiFi/MyPanel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyWiFi", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyWiFi/MyPanel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("78ee917b-1d68-4c39-9192-19c0eec2711b")]
		public virtual MyPanel MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyPanelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyPanelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyPanel of a MyWiFi
		/// <summary>
		/// Gets a list of MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetMyPanel(MyWiFi element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, MyWiFiDomainRoleId);
		}
		#endregion
		#region MyWiFi domain role code
		
		/// <summary>
		/// MyWiFi domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyWiFiDomainRoleId = new global::System.Guid(0xc9f56d7d, 0x8091, 0x467c, 0xaf, 0xbd, 0x43, 0xa0, 0x70, 0xf3, 0xfd, 0x14);
		
		/// <summary>
		/// DomainRole MyWiFi
		/// Description for Company.MyDSL.MyPanelReferencesMyWiFi.MyWiFi
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyWiFi/MyWiFi.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyWiFi/MyWiFi.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyPanel", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyWiFi/MyWiFi.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c9f56d7d-8091-467c-afbd-43a070f3fd14")]
		public virtual MyWiFi MyWiFi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyWiFi)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyWiFiDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyWiFiDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyWiFi of a MyPanel
		/// <summary>
		/// Gets a list of MyWiFi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyWiFi> GetMyWiFi(MyPanel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyWiFi>, MyWiFi>(element, MyPanelDomainRoleId);
		}
		#endregion
		#region MyPanel link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyWiFi links to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyWiFi> GetLinksToMyWiFi ( global::Company.MyDSL.MyPanel myPanelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWiFi>(myPanelInstance, global::Company.MyDSL.MyPanelReferencesMyWiFi.MyPanelDomainRoleId);
		}
		#endregion
		#region MyWiFi link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyWiFi links to a MyWiFi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyWiFi> GetLinksToMyPanel ( global::Company.MyDSL.MyWiFi myWiFiInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWiFi>(myWiFiInstance, global::Company.MyDSL.MyPanelReferencesMyWiFi.MyWiFiDomainRoleId);
		}
		#endregion
		#region MyPanelReferencesMyWiFi instance accessors
		
		/// <summary>
		/// Get any MyPanelReferencesMyWiFi links between a given MyPanel and a MyWiFi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyWiFi> GetLinks( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyWiFi target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyWiFi> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyWiFi>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyWiFi> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWiFi>(source, global::Company.MyDSL.MyPanelReferencesMyWiFi.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyWiFi link in links )
			{
				if ( target.Equals(link.MyWiFi) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyPanelReferencesMyWiFi link between a given MyPaneland a MyWiFi.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.MyPanelReferencesMyWiFi GetLink( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyWiFi target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyWiFi> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWiFi>(source, global::Company.MyDSL.MyPanelReferencesMyWiFi.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyWiFi link in links )
			{
				if ( target.Equals(link.MyWiFi) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship MyPanelReferencesMyWatch
	/// Description for Company.MyDSL.MyPanelReferencesMyWatch
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyWatch.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyWatch.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b75f2dca-1e65-4bce-93cf-9b325d4d3e5e")]
	public partial class MyPanelReferencesMyWatch : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyPanelReferencesMyWatch domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb75f2dca, 0x1e65, 0x4bce, 0x93, 0xcf, 0x9b, 0x32, 0x5d, 0x4d, 0x3e, 0x5e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyPanelReferencesMyWatch link in the same Partition as the given MyPanel
		/// </summary>
		/// <param name="source">MyPanel to use as the source of the relationship.</param>
		/// <param name="target">MyWatch to use as the target of the relationship.</param>
		public MyPanelReferencesMyWatch(MyPanel source, MyWatch target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyPanelReferencesMyWatch.MyPanelDomainRoleId, source), new DslModeling::RoleAssignment(MyPanelReferencesMyWatch.MyWatchDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyWatch(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyWatch(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelReferencesMyWatch(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelReferencesMyWatch(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyPanel domain role code
		
		/// <summary>
		/// MyPanel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyPanelDomainRoleId = new global::System.Guid(0x46d729b1, 0x5e49, 0x4ea5, 0x81, 0xe8, 0x87, 0xa6, 0x1c, 0x03, 0xe5, 0xdf);
		
		/// <summary>
		/// DomainRole MyPanel
		/// Description for Company.MyDSL.MyPanelReferencesMyWatch.MyPanel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyWatch/MyPanel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyWatch/MyPanel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyWatch", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyWatch/MyPanel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("46d729b1-5e49-4ea5-81e8-87a61c03e5df")]
		public virtual MyPanel MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyPanelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyPanelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyPanel of a MyWatch
		/// <summary>
		/// Gets a list of MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetMyPanel(MyWatch element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, MyWatchDomainRoleId);
		}
		#endregion
		#region MyWatch domain role code
		
		/// <summary>
		/// MyWatch domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyWatchDomainRoleId = new global::System.Guid(0xfd9146b4, 0x33fa, 0x4c0c, 0x81, 0x5d, 0x65, 0x88, 0x77, 0xf8, 0x66, 0x66);
		
		/// <summary>
		/// DomainRole MyWatch
		/// Description for Company.MyDSL.MyPanelReferencesMyWatch.MyWatch
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanelReferencesMyWatch/MyWatch.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanelReferencesMyWatch/MyWatch.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyPanel", PropertyDisplayNameKey="Company.MyDSL.MyPanelReferencesMyWatch/MyWatch.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fd9146b4-33fa-4c0c-815d-658877f86666")]
		public virtual MyWatch MyWatch
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyWatch)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyWatchDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyWatchDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyWatch of a MyPanel
		/// <summary>
		/// Gets a list of MyWatch.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyWatch> GetMyWatch(MyPanel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyWatch>, MyWatch>(element, MyPanelDomainRoleId);
		}
		#endregion
		#region MyPanel link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyWatch links to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyWatch> GetLinksToMyWatch ( global::Company.MyDSL.MyPanel myPanelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWatch>(myPanelInstance, global::Company.MyDSL.MyPanelReferencesMyWatch.MyPanelDomainRoleId);
		}
		#endregion
		#region MyWatch link accessor
		/// <summary>
		/// Get the list of MyPanelReferencesMyWatch links to a MyWatch.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyWatch> GetLinksToMyPanel ( global::Company.MyDSL.MyWatch myWatchInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWatch>(myWatchInstance, global::Company.MyDSL.MyPanelReferencesMyWatch.MyWatchDomainRoleId);
		}
		#endregion
		#region MyPanelReferencesMyWatch instance accessors
		
		/// <summary>
		/// Get any MyPanelReferencesMyWatch links between a given MyPanel and a MyWatch.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.MyPanelReferencesMyWatch> GetLinks( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyWatch target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyWatch> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.MyPanelReferencesMyWatch>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyWatch> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWatch>(source, global::Company.MyDSL.MyPanelReferencesMyWatch.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyWatch link in links )
			{
				if ( target.Equals(link.MyWatch) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyPanelReferencesMyWatch link between a given MyPaneland a MyWatch.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.MyPanelReferencesMyWatch GetLink( global::Company.MyDSL.MyPanel source, global::Company.MyDSL.MyWatch target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.MyPanelReferencesMyWatch> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.MyPanelReferencesMyWatch>(source, global::Company.MyDSL.MyPanelReferencesMyWatch.MyPanelDomainRoleId);
			foreach ( global::Company.MyDSL.MyPanelReferencesMyWatch link in links )
			{
				if ( target.Equals(link.MyWatch) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainRelationship SwimHasMyCompBase
	/// Description for Company.MyDSL.SwimHasMyCompBase
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.SwimHasMyCompBase.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.SwimHasMyCompBase.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("567bd191-6f41-484c-905d-d6325e0dc0ab")]
	public partial class SwimHasMyCompBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SwimHasMyCompBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x567bd191, 0x6f41, 0x484c, 0x90, 0x5d, 0xd6, 0x32, 0x5e, 0x0d, 0xc0, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SwimHasMyCompBase link in the same Partition as the given Swim
		/// </summary>
		/// <param name="source">Swim to use as the source of the relationship.</param>
		/// <param name="target">MyCompBase to use as the target of the relationship.</param>
		public SwimHasMyCompBase(Swim source, MyCompBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SwimHasMyCompBase.SwimDomainRoleId, source), new DslModeling::RoleAssignment(SwimHasMyCompBase.MyCompBaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SwimHasMyCompBase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SwimHasMyCompBase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SwimHasMyCompBase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SwimHasMyCompBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Swim domain role code
		
		/// <summary>
		/// Swim domain role Id.
		/// </summary>
		public static readonly global::System.Guid SwimDomainRoleId = new global::System.Guid(0xf7cb0beb, 0xf88c, 0x478c, 0xb3, 0x68, 0xa9, 0x3d, 0xb7, 0x53, 0x6d, 0x8a);
		
		/// <summary>
		/// DomainRole Swim
		/// Description for Company.MyDSL.SwimHasMyCompBase.Swim
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.SwimHasMyCompBase/Swim.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.SwimHasMyCompBase/Swim.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyCompBase", PropertyDisplayNameKey="Company.MyDSL.SwimHasMyCompBase/Swim.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f7cb0beb-f88c-478c-b368-a93db7536d8a")]
		public virtual Swim Swim
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Swim)DslModeling::DomainRoleInfo.GetRolePlayer(this, SwimDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SwimDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Swim of a MyCompBase
		/// <summary>
		/// Gets Swim.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Swim GetSwim(MyCompBase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MyCompBaseDomainRoleId) as Swim;
		}
		
		/// <summary>
		/// Sets Swim.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSwim(MyCompBase element, Swim newSwim)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MyCompBaseDomainRoleId, newSwim);
		}
		#endregion
		#region MyCompBase domain role code
		
		/// <summary>
		/// MyCompBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyCompBaseDomainRoleId = new global::System.Guid(0x99199608, 0x28e4, 0x4f84, 0x80, 0x59, 0x03, 0xd8, 0x84, 0x8b, 0x02, 0x53);
		
		/// <summary>
		/// DomainRole MyCompBase
		/// Description for Company.MyDSL.SwimHasMyCompBase.MyCompBase
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.SwimHasMyCompBase/MyCompBase.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.SwimHasMyCompBase/MyCompBase.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Swim", PropertyDisplayNameKey="Company.MyDSL.SwimHasMyCompBase/MyCompBase.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("99199608-28e4-4f84-8059-03d8848b0253")]
		public virtual MyCompBase MyCompBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyCompBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyCompBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyCompBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyCompBase of a Swim
		/// <summary>
		/// Gets a list of MyCompBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyCompBase> GetMyCompBase(Swim element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyCompBase>, MyCompBase>(element, SwimDomainRoleId);
		}
		#endregion
		#region Swim link accessor
		/// <summary>
		/// Get the list of SwimHasMyCompBase links to a Swim.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.SwimHasMyCompBase> GetLinksToMyCompBase ( global::Company.MyDSL.Swim swimInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.SwimHasMyCompBase>(swimInstance, global::Company.MyDSL.SwimHasMyCompBase.SwimDomainRoleId);
		}
		#endregion
		#region MyCompBase link accessor
		/// <summary>
		/// Get the SwimHasMyCompBase link to a MyCompBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.SwimHasMyCompBase GetLinkToSwim (global::Company.MyDSL.MyCompBase myCompBaseInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.SwimHasMyCompBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.SwimHasMyCompBase>(myCompBaseInstance, global::Company.MyDSL.SwimHasMyCompBase.MyCompBaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MyCompBase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SwimHasMyCompBase instance accessors
		
		/// <summary>
		/// Get any SwimHasMyCompBase links between a given Swim and a MyCompBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDSL.SwimHasMyCompBase> GetLinks( global::Company.MyDSL.Swim source, global::Company.MyDSL.MyCompBase target )
		{
			global::System.Collections.Generic.List<global::Company.MyDSL.SwimHasMyCompBase> outLinks = new global::System.Collections.Generic.List<global::Company.MyDSL.SwimHasMyCompBase>();
			global::System.Collections.Generic.IList<global::Company.MyDSL.SwimHasMyCompBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.SwimHasMyCompBase>(source, global::Company.MyDSL.SwimHasMyCompBase.SwimDomainRoleId);
			foreach ( global::Company.MyDSL.SwimHasMyCompBase link in links )
			{
				if ( target.Equals(link.MyCompBase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SwimHasMyCompBase link between a given Swimand a MyCompBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDSL.SwimHasMyCompBase GetLink( global::Company.MyDSL.Swim source, global::Company.MyDSL.MyCompBase target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDSL.SwimHasMyCompBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDSL.SwimHasMyCompBase>(source, global::Company.MyDSL.SwimHasMyCompBase.SwimDomainRoleId);
			foreach ( global::Company.MyDSL.SwimHasMyCompBase link in links )
			{
				if ( target.Equals(link.MyCompBase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
