//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass ExampleModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.ExampleModel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.ExampleModel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3a70f049-0185-48c9-a717-92d31f07491f")]
	public partial class ExampleModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExampleModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a70f049, 0x0185, 0x48c9, 0xa7, 0x17, 0x92, 0xd3, 0x1f, 0x07, 0x49, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyPanel> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(global::Company.MyDSL.ExampleModelHasElements.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region Swim opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Swim.
		/// Description for Company.MyDSL.ExampleModelHasSwim.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Swim> Swim
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Swim>, Swim>(global::Company.MyDSL.ExampleModelHasSwim.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDSL.MyPanel.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDSL.Swim.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDSL.MyPanel sourceMyPanel1 = sourceElement as global::Company.MyDSL.MyPanel;
			if (sourceMyPanel1 != null)
			{
				// Create link for path ExampleModelHasElements.Elements
				this.Elements.Add(sourceMyPanel1);

				return;
			}
				
			global::Company.MyDSL.Swim sourceSwim2 = sourceElement as global::Company.MyDSL.Swim;
			if (sourceSwim2 != null)
			{
				// Create link for path ExampleModelHasSwim.Swim
				this.Swim.Add(sourceSwim2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDSL.MyPanel sourceMyPanel1 = sourceElement as global::Company.MyDSL.MyPanel;
			if (sourceMyPanel1 != null)
			{
				// Delete link for path ExampleModelHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Company.MyDSL.ExampleModelHasElements.GetLinks((global::Company.MyDSL.ExampleModel)this, sourceMyPanel1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDSL.ExampleModelHasElements.ExampleModelDomainRoleId, global::Company.MyDSL.ExampleModelHasElements.ElementDomainRoleId);
				}

				return;
			}
				
			global::Company.MyDSL.Swim sourceSwim2 = sourceElement as global::Company.MyDSL.Swim;
			if (sourceSwim2 != null)
			{
				// Delete link for path ExampleModelHasSwim.Swim
				
				foreach (DslModeling::ElementLink link in global::Company.MyDSL.ExampleModelHasSwim.GetLinks((global::Company.MyDSL.ExampleModel)this, sourceSwim2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDSL.ExampleModelHasSwim.ExampleModelDomainRoleId, global::Company.MyDSL.ExampleModelHasSwim.SwimDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyPanel
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyPanel.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyPanel.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("2721317b-30c6-489c-99c4-12e0a4e30474")]
	public partial class MyPanel : MyCompBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyPanel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2721317b, 0x30c6, 0x489c, 0x99, 0xc4, 0x12, 0xe0, 0xa4, 0xe3, 0x04, 0x74);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyPanel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyPanel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9d28ad42, 0x13f0, 0x4c8c, 0xa1, 0x0e, 0x0a, 0x6a, 0x45, 0xbd, 0xfa, 0xf3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.MyPanel.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyPanel/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyPanel/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9d28ad42-13f0-4c8c-a10e-0a6a45bdfaf3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyPanel.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyPanel, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyPanel.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyPanel.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyPanel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyPanel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDSL.ExampleModelHasElements.ElementDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDSL.ExampleModelHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region MyButton opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyButton.
		/// Description for Company.MyDSL.MyPanelReferencesMyButton.MyPanel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyButton> MyButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyButton>, MyButton>(global::Company.MyDSL.MyPanelReferencesMyButton.MyPanelDomainRoleId);
			}
		}
		#endregion
		#region MyInput opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyInput.
		/// Description for Company.MyDSL.MyPanelReferencesMyInput.MyPanel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyInput> MyInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyInput>, MyInput>(global::Company.MyDSL.MyPanelReferencesMyInput.MyPanelDomainRoleId);
			}
		}
		#endregion
		#region MyCart opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyCart.
		/// Description for Company.MyDSL.MyPanelReferencesMyCart.MyPanel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyCart> MyCart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyCart>, MyCart>(global::Company.MyDSL.MyPanelReferencesMyCart.MyPanelDomainRoleId);
			}
		}
		#endregion
		#region MySetting opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MySetting.
		/// Description for Company.MyDSL.MyPanelReferencesMySetting.MyPanel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MySetting> MySetting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MySetting>, MySetting>(global::Company.MyDSL.MyPanelReferencesMySetting.MyPanelDomainRoleId);
			}
		}
		#endregion
		#region MyWiFi opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyWiFi.
		/// Description for Company.MyDSL.MyPanelReferencesMyWiFi.MyPanel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyWiFi> MyWiFi
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyWiFi>, MyWiFi>(global::Company.MyDSL.MyPanelReferencesMyWiFi.MyPanelDomainRoleId);
			}
		}
		#endregion
		#region MyWatch opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyWatch.
		/// Description for Company.MyDSL.MyPanelReferencesMyWatch.MyPanel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyWatch> MyWatch
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyWatch>, MyWatch>(global::Company.MyDSL.MyPanelReferencesMyWatch.MyPanelDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyButton
	/// Description for Company.MyDSL.MyButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyButton.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyButton.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0141b36f-261f-49ec-a043-d5762b72cba5")]
	public partial class MyButton : MyCompBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0141b36f, 0x261f, 0x49ec, 0xa0, 0x43, 0xd5, 0x76, 0x2b, 0x72, 0xcb, 0xa5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyButton(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyButton(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x27f24f14, 0xc77f, 0x4976, 0x90, 0x3d, 0x96, 0x18, 0x9a, 0xe7, 0x68, 0x36);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.MyButton.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyButton/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyButton/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("27f24f14-c77f-4976-903d-96189ae76836")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyButton.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyButton, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyButton.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyButton.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyPanel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyPanel.
		/// Description for Company.MyDSL.MyPanelReferencesMyButton.MyButton
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyPanel> MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(global::Company.MyDSL.MyPanelReferencesMyButton.MyButtonDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyInput
	/// Description for Company.MyDSL.MyInput
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyInput.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyInput.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("03f4f184-33d4-4711-820a-3f4c8026b14d")]
	public partial class MyInput : MyCompBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyInput domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x03f4f184, 0x33d4, 0x4711, 0x82, 0x0a, 0x3f, 0x4c, 0x80, 0x26, 0xb1, 0x4d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyInput(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyInput(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x14cc5512, 0xf21e, 0x49c9, 0xa5, 0x33, 0x2f, 0x55, 0xac, 0x81, 0x71, 0xa3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.MyInput.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyInput/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyInput/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("14cc5512-f21e-49c9-a533-2f55ac8171a3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyInput.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyInput, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyInput.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyInput.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyInput element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyInput element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyPanel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyPanel.
		/// Description for Company.MyDSL.MyPanelReferencesMyInput.MyInput
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyPanel> MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(global::Company.MyDSL.MyPanelReferencesMyInput.MyInputDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyCompBase
	/// Description for Company.MyDSL.MyCompBase
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyCompBase.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyCompBase.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5015f618-ce6c-4695-8c04-47deb3c92754")]
	public abstract partial class MyCompBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyCompBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5015f618, 0xce6c, 0x4695, 0x8c, 0x04, 0x47, 0xde, 0xb3, 0xc9, 0x27, 0x54);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected MyCompBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Swim opposite domain role accessor
		/// <summary>
		/// Gets or sets Swim.
		/// Description for Company.MyDSL.SwimHasMyCompBase.MyCompBase
		/// </summary>
		public virtual Swim Swim
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDSL.SwimHasMyCompBase.MyCompBaseDomainRoleId) as Swim;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDSL.SwimHasMyCompBase.MyCompBaseDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyWatch
	/// Description for Company.MyDSL.MyWatch
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyWatch.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyWatch.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("b1190a96-5494-48f7-92a4-f2f54c0ddc8e")]
	public partial class MyWatch : MyCompBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyWatch domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb1190a96, 0x5494, 0x48f7, 0x92, 0xa4, 0xf2, 0xf5, 0x4c, 0x0d, 0xdc, 0x8e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyWatch(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyWatch(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x537f7a79, 0xcdb7, 0x4530, 0xae, 0x67, 0x92, 0x8a, 0xd4, 0x5f, 0x1d, 0x50);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.MyWatch.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyWatch/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyWatch/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("537f7a79-cdb7-4530-ae67-928ad45f1d50")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyWatch.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyWatch, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyWatch.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyWatch.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyWatch element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyWatch element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyPanel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyPanel.
		/// Description for Company.MyDSL.MyPanelReferencesMyWatch.MyWatch
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyPanel> MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(global::Company.MyDSL.MyPanelReferencesMyWatch.MyWatchDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass Swim
	/// Description for Company.MyDSL.Swim
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.Swim.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.Swim.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("13999484-98b5-4e15-98b0-c0baa8aa9352")]
	public partial class Swim : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Swim domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13999484, 0x98b5, 0x4e15, 0x98, 0xb0, 0xc0, 0xba, 0xa8, 0xaa, 0x93, 0x52);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Swim(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Swim(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xcddadc1a, 0x3aab, 0x42bc, 0x93, 0x26, 0xcb, 0x63, 0xea, 0xb0, 0x03, 0x87);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.Swim.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.Swim/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.Swim/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cddadc1a-3aab-42bc-9326-cb63eab00387")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Swim.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Swim, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Swim.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Swim.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Swim element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Swim element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for Company.MyDSL.ExampleModelHasSwim.Swim
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDSL.ExampleModelHasSwim.SwimDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDSL.ExampleModelHasSwim.SwimDomainRoleId, value);
			}
		}
		#endregion
		#region MyCompBase opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyCompBase.
		/// Description for Company.MyDSL.SwimHasMyCompBase.Swim
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyCompBase> MyCompBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyCompBase>, MyCompBase>(global::Company.MyDSL.SwimHasMyCompBase.SwimDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDSL.MyCompBase.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDSL.MyCompBase sourceMyCompBase1 = sourceElement as global::Company.MyDSL.MyCompBase;
			if (sourceMyCompBase1 != null)
			{
				// Create link for path SwimHasMyCompBase.MyCompBase
				this.MyCompBase.Add(sourceMyCompBase1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDSL.MyCompBase sourceMyCompBase1 = sourceElement as global::Company.MyDSL.MyCompBase;
			if (sourceMyCompBase1 != null)
			{
				// Delete link for path SwimHasMyCompBase.MyCompBase
				
				foreach (DslModeling::ElementLink link in global::Company.MyDSL.SwimHasMyCompBase.GetLinks((global::Company.MyDSL.Swim)this, sourceMyCompBase1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDSL.SwimHasMyCompBase.SwimDomainRoleId, global::Company.MyDSL.SwimHasMyCompBase.MyCompBaseDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyWiFi
	/// Description for Company.MyDSL.MyWiFi
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyWiFi.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyWiFi.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3904b8a4-7ecc-4c9a-a534-63a53978ef78")]
	public partial class MyWiFi : MyCompBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyWiFi domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3904b8a4, 0x7ecc, 0x4c9a, 0xa5, 0x34, 0x63, 0xa5, 0x39, 0x78, 0xef, 0x78);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyWiFi(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyWiFi(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0dd5fe15, 0xc76f, 0x4955, 0xbd, 0x7d, 0x94, 0x7f, 0xbf, 0xf1, 0x94, 0xea);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.MyWiFi.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyWiFi/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyWiFi/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0dd5fe15-c76f-4955-bd7d-947fbff194ea")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyWiFi.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyWiFi, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyWiFi.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyWiFi.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyWiFi element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyWiFi element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GHz domain property code
		
		/// <summary>
		/// GHz domain property Id.
		/// </summary>
		public static readonly global::System.Guid GHzDomainPropertyId = new global::System.Guid(0x1be61c7e, 0x286e, 0x4e0e, 0x8f, 0x24, 0x7a, 0x56, 0x70, 0x87, 0x81, 0xab);
		
		/// <summary>
		/// Storage for GHz
		/// </summary>
		private global::System.Double gHzPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GHz domain property.
		/// Description for Company.MyDSL.MyWiFi.GHz
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyWiFi/GHz.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyWiFi/GHz.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1be61c7e-286e-4e0e-8f24-7a56708781ab")]
		public global::System.Double GHz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return gHzPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GHzPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyWiFi.GHz domain property.
		/// </summary>
		internal sealed partial class GHzPropertyHandler : DslModeling::DomainPropertyValueHandler<MyWiFi, global::System.Double>
		{
			private GHzPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyWiFi.GHz domain property value handler.
			/// </summary>
			public static readonly GHzPropertyHandler Instance = new GHzPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyWiFi.GHz domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GHzDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(MyWiFi element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.gHzPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyWiFi element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.gHzPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyPanel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyPanel.
		/// Description for Company.MyDSL.MyPanelReferencesMyWiFi.MyWiFi
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyPanel> MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(global::Company.MyDSL.MyPanelReferencesMyWiFi.MyWiFiDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MySetting
	/// Description for Company.MyDSL.MySetting
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MySetting.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MySetting.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0a7e82da-4ed6-4e72-a3ef-b6f6ed33fad6")]
	public partial class MySetting : MyCompBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MySetting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a7e82da, 0x4ed6, 0x4e72, 0xa3, 0xef, 0xb6, 0xf6, 0xed, 0x33, 0xfa, 0xd6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MySetting(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MySetting(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x042d3e51, 0x338a, 0x4905, 0xaf, 0x5e, 0x02, 0x07, 0x4f, 0x6c, 0x0f, 0xdd);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.MySetting.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MySetting/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MySetting/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("042d3e51-338a-4905-af5e-02074f6c0fdd")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MySetting.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MySetting, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MySetting.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MySetting.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MySetting element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MySetting element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyPanel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyPanel.
		/// Description for Company.MyDSL.MyPanelReferencesMySetting.MySetting
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyPanel> MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(global::Company.MyDSL.MyPanelReferencesMySetting.MySettingDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyCart
	/// Description for Company.MyDSL.MyCart
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyCart.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyCart.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5c87237b-245e-4898-9f01-3bde69b49c9a")]
	public partial class MyCart : MyCompBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyCart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c87237b, 0x245e, 0x4898, 0x9f, 0x01, 0x3b, 0xde, 0x69, 0xb4, 0x9c, 0x9a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyCart(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyCart(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3faee271, 0x4fd5, 0x4ed4, 0x93, 0x1c, 0x5b, 0x5f, 0x0e, 0xa8, 0xfb, 0x49);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDSL.MyCart.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyCart/Name.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyCart/Name.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3faee271-4fd5-4ed4-931c-5b5f0ea8fb49")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyCart.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyCart, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyCart.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyCart.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyCart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyCart element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Total domain property code
		
		/// <summary>
		/// Total domain property Id.
		/// </summary>
		public static readonly global::System.Guid TotalDomainPropertyId = new global::System.Guid(0x7cf85da3, 0x1282, 0x4ae6, 0x87, 0x34, 0x2d, 0x1a, 0xe4, 0xae, 0x72, 0x33);
		
		/// <summary>
		/// Storage for Total
		/// </summary>
		private global::System.Int64 totalPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Total domain property.
		/// Description for Company.MyDSL.MyCart.Total
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDSL.MyCart/Total.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDSL.MyCart/Total.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7cf85da3-1282-4ae6-8734-2d1ae4ae7233")]
		public global::System.Int64 Total
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return totalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TotalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyCart.Total domain property.
		/// </summary>
		internal sealed partial class TotalPropertyHandler : DslModeling::DomainPropertyValueHandler<MyCart, global::System.Int64>
		{
			private TotalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyCart.Total domain property value handler.
			/// </summary>
			public static readonly TotalPropertyHandler Instance = new TotalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyCart.Total domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TotalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int64 GetValue(MyCart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.totalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyCart element, global::System.Int64 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int64 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.totalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MyPanel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyPanel.
		/// Description for Company.MyDSL.MyPanelReferencesMyCart.MyCart
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyPanel> MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(global::Company.MyDSL.MyPanelReferencesMyCart.MyCartDomainRoleId);
			}
		}
		#endregion
	}
}
