//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslCompartment
{
	/// <summary>
	/// DomainRelationship ExampleModelHasScaffale
	/// Description for Company.MyDslCompartment.ExampleModelHasScaffale
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslCompartment.ExampleModelHasScaffale.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslCompartment.ExampleModelHasScaffale.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("af73911d-20ba-42bb-b478-ccbc92536498")]
	public partial class ExampleModelHasScaffale : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasScaffale domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaf73911d, 0x20ba, 0x42bb, 0xb4, 0x78, 0xcc, 0xbc, 0x92, 0x53, 0x64, 0x98);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasScaffale link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">Scaffale to use as the target of the relationship.</param>
		public ExampleModelHasScaffale(ExampleModel source, Scaffale target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasScaffale.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasScaffale.ScaffaleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasScaffale(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasScaffale(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasScaffale(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasScaffale(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0xf1ac2f46, 0xa707, 0x46e9, 0xb1, 0x76, 0xd8, 0x78, 0xed, 0x57, 0x21, 0x7b);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// Description for Company.MyDslCompartment.ExampleModelHasScaffale.ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslCompartment.ExampleModelHasScaffale/ExampleModel.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslCompartment.ExampleModelHasScaffale/ExampleModel.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Scaffale", PropertyDisplayNameKey="Company.MyDslCompartment.ExampleModelHasScaffale/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f1ac2f46-a707-46e9-b176-d878ed57217b")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a Scaffale
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(Scaffale element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ScaffaleDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(Scaffale element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ScaffaleDomainRoleId, newExampleModel);
		}
		#endregion
		#region Scaffale domain role code
		
		/// <summary>
		/// Scaffale domain role Id.
		/// </summary>
		public static readonly global::System.Guid ScaffaleDomainRoleId = new global::System.Guid(0xf7082cc8, 0xb1b5, 0x4edc, 0xa6, 0xcd, 0x8c, 0x82, 0x7d, 0x15, 0x00, 0x7f);
		
		/// <summary>
		/// DomainRole Scaffale
		/// Description for Company.MyDslCompartment.ExampleModelHasScaffale.Scaffale
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslCompartment.ExampleModelHasScaffale/Scaffale.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslCompartment.ExampleModelHasScaffale/Scaffale.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.MyDslCompartment.ExampleModelHasScaffale/Scaffale.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f7082cc8-b1b5-4edc-a6cd-8c827d15007f")]
		public virtual Scaffale Scaffale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Scaffale)DslModeling::DomainRoleInfo.GetRolePlayer(this, ScaffaleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ScaffaleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Scaffale of a ExampleModel
		/// <summary>
		/// Gets a list of Scaffale.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Scaffale> GetScaffale(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Scaffale>, Scaffale>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasScaffale links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslCompartment.ExampleModelHasScaffale> GetLinksToScaffale ( global::Company.MyDslCompartment.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ExampleModelHasScaffale>(exampleModelInstance, global::Company.MyDslCompartment.ExampleModelHasScaffale.ExampleModelDomainRoleId);
		}
		#endregion
		#region Scaffale link accessor
		/// <summary>
		/// Get the ExampleModelHasScaffale link to a Scaffale.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslCompartment.ExampleModelHasScaffale GetLinkToExampleModel (global::Company.MyDslCompartment.Scaffale scaffaleInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslCompartment.ExampleModelHasScaffale> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ExampleModelHasScaffale>(scaffaleInstance, global::Company.MyDslCompartment.ExampleModelHasScaffale.ScaffaleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Scaffale not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasScaffale instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasScaffale links between a given ExampleModel and a Scaffale.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslCompartment.ExampleModelHasScaffale> GetLinks( global::Company.MyDslCompartment.ExampleModel source, global::Company.MyDslCompartment.Scaffale target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslCompartment.ExampleModelHasScaffale> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslCompartment.ExampleModelHasScaffale>();
			global::System.Collections.Generic.IList<global::Company.MyDslCompartment.ExampleModelHasScaffale> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ExampleModelHasScaffale>(source, global::Company.MyDslCompartment.ExampleModelHasScaffale.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslCompartment.ExampleModelHasScaffale link in links )
			{
				if ( target.Equals(link.Scaffale) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasScaffale link between a given ExampleModeland a Scaffale.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslCompartment.ExampleModelHasScaffale GetLink( global::Company.MyDslCompartment.ExampleModel source, global::Company.MyDslCompartment.Scaffale target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslCompartment.ExampleModelHasScaffale> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ExampleModelHasScaffale>(source, global::Company.MyDslCompartment.ExampleModelHasScaffale.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslCompartment.ExampleModelHasScaffale link in links )
			{
				if ( target.Equals(link.Scaffale) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslCompartment
{
	/// <summary>
	/// DomainRelationship ScaffaleHasLibro
	/// Description for Company.MyDslCompartment.ScaffaleHasLibro
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslCompartment.ScaffaleHasLibro.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslCompartment.ScaffaleHasLibro.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("da5b2546-8d46-4964-8858-dc72984c5e7e")]
	public partial class ScaffaleHasLibro : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ScaffaleHasLibro domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda5b2546, 0x8d46, 0x4964, 0x88, 0x58, 0xdc, 0x72, 0x98, 0x4c, 0x5e, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ScaffaleHasLibro link in the same Partition as the given Scaffale
		/// </summary>
		/// <param name="source">Scaffale to use as the source of the relationship.</param>
		/// <param name="target">Libro to use as the target of the relationship.</param>
		public ScaffaleHasLibro(Scaffale source, Libro target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ScaffaleHasLibro.ScaffaleDomainRoleId, source), new DslModeling::RoleAssignment(ScaffaleHasLibro.LibroDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ScaffaleHasLibro(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ScaffaleHasLibro(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ScaffaleHasLibro(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ScaffaleHasLibro(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Scaffale domain role code
		
		/// <summary>
		/// Scaffale domain role Id.
		/// </summary>
		public static readonly global::System.Guid ScaffaleDomainRoleId = new global::System.Guid(0x333ee265, 0x4229, 0x47bd, 0x88, 0x58, 0x43, 0x93, 0x29, 0xaa, 0x27, 0x82);
		
		/// <summary>
		/// DomainRole Scaffale
		/// Description for Company.MyDslCompartment.ScaffaleHasLibro.Scaffale
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslCompartment.ScaffaleHasLibro/Scaffale.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslCompartment.ScaffaleHasLibro/Scaffale.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Libro", PropertyDisplayNameKey="Company.MyDslCompartment.ScaffaleHasLibro/Scaffale.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("333ee265-4229-47bd-8858-439329aa2782")]
		public virtual Scaffale Scaffale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Scaffale)DslModeling::DomainRoleInfo.GetRolePlayer(this, ScaffaleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ScaffaleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Scaffale of a Libro
		/// <summary>
		/// Gets Scaffale.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Scaffale GetScaffale(Libro element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LibroDomainRoleId) as Scaffale;
		}
		
		/// <summary>
		/// Sets Scaffale.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetScaffale(Libro element, Scaffale newScaffale)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LibroDomainRoleId, newScaffale);
		}
		#endregion
		#region Libro domain role code
		
		/// <summary>
		/// Libro domain role Id.
		/// </summary>
		public static readonly global::System.Guid LibroDomainRoleId = new global::System.Guid(0xe3415f45, 0xe8ce, 0x4845, 0xb2, 0x02, 0x6d, 0x5b, 0x55, 0x09, 0x48, 0x8c);
		
		/// <summary>
		/// DomainRole Libro
		/// Description for Company.MyDslCompartment.ScaffaleHasLibro.Libro
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslCompartment.ScaffaleHasLibro/Libro.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslCompartment.ScaffaleHasLibro/Libro.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Scaffale", PropertyDisplayNameKey="Company.MyDslCompartment.ScaffaleHasLibro/Libro.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e3415f45-e8ce-4845-b202-6d5b5509488c")]
		public virtual Libro Libro
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Libro)DslModeling::DomainRoleInfo.GetRolePlayer(this, LibroDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LibroDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Libro of a Scaffale
		/// <summary>
		/// Gets a list of Libro.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Libro> GetLibro(Scaffale element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Libro>, Libro>(element, ScaffaleDomainRoleId);
		}
		#endregion
		#region Scaffale link accessor
		/// <summary>
		/// Get the list of ScaffaleHasLibro links to a Scaffale.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslCompartment.ScaffaleHasLibro> GetLinksToLibro ( global::Company.MyDslCompartment.Scaffale scaffaleInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ScaffaleHasLibro>(scaffaleInstance, global::Company.MyDslCompartment.ScaffaleHasLibro.ScaffaleDomainRoleId);
		}
		#endregion
		#region Libro link accessor
		/// <summary>
		/// Get the ScaffaleHasLibro link to a Libro.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslCompartment.ScaffaleHasLibro GetLinkToScaffale (global::Company.MyDslCompartment.Libro libroInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslCompartment.ScaffaleHasLibro> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ScaffaleHasLibro>(libroInstance, global::Company.MyDslCompartment.ScaffaleHasLibro.LibroDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Libro not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ScaffaleHasLibro instance accessors
		
		/// <summary>
		/// Get any ScaffaleHasLibro links between a given Scaffale and a Libro.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslCompartment.ScaffaleHasLibro> GetLinks( global::Company.MyDslCompartment.Scaffale source, global::Company.MyDslCompartment.Libro target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslCompartment.ScaffaleHasLibro> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslCompartment.ScaffaleHasLibro>();
			global::System.Collections.Generic.IList<global::Company.MyDslCompartment.ScaffaleHasLibro> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ScaffaleHasLibro>(source, global::Company.MyDslCompartment.ScaffaleHasLibro.ScaffaleDomainRoleId);
			foreach ( global::Company.MyDslCompartment.ScaffaleHasLibro link in links )
			{
				if ( target.Equals(link.Libro) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ScaffaleHasLibro link between a given Scaffaleand a Libro.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslCompartment.ScaffaleHasLibro GetLink( global::Company.MyDslCompartment.Scaffale source, global::Company.MyDslCompartment.Libro target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslCompartment.ScaffaleHasLibro> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslCompartment.ScaffaleHasLibro>(source, global::Company.MyDslCompartment.ScaffaleHasLibro.ScaffaleDomainRoleId);
			foreach ( global::Company.MyDslCompartment.ScaffaleHasLibro link in links )
			{
				if ( target.Equals(link.Libro) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
