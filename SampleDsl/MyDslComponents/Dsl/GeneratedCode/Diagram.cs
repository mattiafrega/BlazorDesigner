//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Company.MyDslComponents.MyDslComponentsDiagram")]

namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass MyDslComponentsDiagram
	/// Description for Company.MyDslComponents.MyDslComponentsDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.MyDslComponentsDiagram.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.MyDslComponentsDiagram.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("784f2278-41ee-4cd9-aa77-6008803f3a83")]
	public partial class MyDslComponentsDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Company.MyDslComponents.MyDslComponentsToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Company.MyDslComponents.MyButton)
			{
				global::Company.MyDslComponents.MyButtonShape newShape = new global::Company.MyDslComponents.MyButtonShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDslComponents.MyTextbox)
			{
				global::Company.MyDslComponents.MyTextboxShape newShape = new global::Company.MyDslComponents.MyTextboxShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDslComponents.MyGauge)
			{
				global::Company.MyDslComponents.MyGaugeShape newShape = new global::Company.MyDslComponents.MyGaugeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Company.MyDslComponents.MyButtonShape.DecoratorsInitialized += MyButtonShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.MyDslComponents.MyTextboxShape.DecoratorsInitialized += MyTextboxShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.MyDslComponents.MyGaugeShape.DecoratorsInitialized += MyGaugeShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MyButtonShape.
		/// </summary>
		internal static partial class MyButtonShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MyButtonShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDslComponents.MyButton.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDslComponents.MyButton.TextDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextDecor").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MyTextboxShape.
		/// </summary>
		internal static partial class MyTextboxShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MyTextboxShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDslComponents.MyTextbox.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDslComponents.MyTextbox.TextDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextDecor").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MyGaugeShape.
		/// </summary>
		internal static partial class MyGaugeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MyGaugeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDslComponents.MyGauge.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDslComponents.MyGauge.RangeEndDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "RangeEndDecor").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDslComponents.MyGauge.RangeStartDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "RangeStartDecor").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyDslComponentsDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x784f2278, 0x41ee, 0x4cd9, 0xaa, 0x77, 0x60, 0x08, 0x80, 0x3f, 0x3a, 0x83);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyDslComponentsDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyDslComponentsDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Company.MyDslComponents.MyButton), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDslComponents.MyTextbox), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDslComponents.MyGauge), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::Company.MyDslComponents.MyButton)
				{
					parentElement = GetParentForMyButton((global::Company.MyDslComponents.MyButton)childElement);
				} else
				if(childElement is global::Company.MyDslComponents.MyTextbox)
				{
					parentElement = GetParentForMyTextbox((global::Company.MyDslComponents.MyTextbox)childElement);
				} else
				if(childElement is global::Company.MyDslComponents.MyGauge)
				{
					parentElement = GetParentForMyGauge((global::Company.MyDslComponents.MyGauge)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Company.MyDslComponents.ExampleModel GetParentForMyButton( global::Company.MyDslComponents.MyButton root )
			{
				// Segments 0 and 1
				global::Company.MyDslComponents.ExampleModel result = root.ExampleModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDslComponents.ExampleModel GetParentForMyTextbox( global::Company.MyDslComponents.MyTextbox root )
			{
				// Segments 0 and 1
				global::Company.MyDslComponents.ExampleModel result = root.ExampleModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDslComponents.ExampleModel GetParentForMyGauge( global::Company.MyDslComponents.MyGauge root )
			{
				// Segments 0 and 1
				global::Company.MyDslComponents.ExampleModel result = root.ExampleModel;
				if ( result == null ) return null;
				return result;
			}
		}
		
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Company.MyDslComponents.MyButton), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDslComponents.MyTextbox), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDslComponents.MyGauge), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::Company.MyDslComponents.MyButton.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.MyDslComponents.MyButtonShape.FindMyButtonShapeDecorator("NameDecor");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.MyDslComponents.MyButton.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Company.MyDslComponents.MyTextbox.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.MyDslComponents.MyTextboxShape.FindMyTextboxShapeDecorator("NameDecor");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.MyDslComponents.MyTextbox.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Company.MyDslComponents.MyGauge.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Company.MyDslComponents.MyGaugeShape.FindMyGaugeShapeDecorator("NameDecor");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Company.MyDslComponents.MyGauge.DomainClassId);
					}
				}
			}
		}
	
	}
