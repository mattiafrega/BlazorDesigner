//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslCompartment
{
	/// <summary>
	/// DomainClass ExampleModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslCompartment.ExampleModel.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslCompartment.ExampleModel.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6ab89487-4c40-4332-a798-53e4645844c4")]
	public partial class ExampleModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExampleModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ab89487, 0x4c40, 0x4332, 0xa7, 0x98, 0x53, 0xe4, 0x64, 0x58, 0x44, 0xc4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Scaffale opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Scaffale.
		/// Description for Company.MyDslCompartment.ExampleModelHasScaffale.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Scaffale> Scaffale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Scaffale>, Scaffale>(global::Company.MyDslCompartment.ExampleModelHasScaffale.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslCompartment.Scaffale.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslCompartment.Scaffale sourceScaffale1 = sourceElement as global::Company.MyDslCompartment.Scaffale;
			if (sourceScaffale1 != null)
			{
				// Create link for path ExampleModelHasScaffale.Scaffale
				this.Scaffale.Add(sourceScaffale1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslCompartment.Scaffale sourceScaffale1 = sourceElement as global::Company.MyDslCompartment.Scaffale;
			if (sourceScaffale1 != null)
			{
				// Delete link for path ExampleModelHasScaffale.Scaffale
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslCompartment.ExampleModelHasScaffale.GetLinks((global::Company.MyDslCompartment.ExampleModel)this, sourceScaffale1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslCompartment.ExampleModelHasScaffale.ExampleModelDomainRoleId, global::Company.MyDslCompartment.ExampleModelHasScaffale.ScaffaleDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslCompartment
{
	/// <summary>
	/// DomainClass Scaffale
	/// Description for Company.MyDslCompartment.Scaffale
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslCompartment.Scaffale.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslCompartment.Scaffale.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("851869ef-5d50-4419-9c66-1199ae5a4a83")]
	public partial class Scaffale : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Scaffale domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x851869ef, 0x5d50, 0x4419, 0x9c, 0x66, 0x11, 0x99, 0xae, 0x5a, 0x4a, 0x83);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Scaffale(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Scaffale(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NomeScaffale domain property code
		
		/// <summary>
		/// NomeScaffale domain property Id.
		/// </summary>
		public static readonly global::System.Guid NomeScaffaleDomainPropertyId = new global::System.Guid(0x437a559b, 0xb675, 0x461c, 0x9a, 0x29, 0x4c, 0x3c, 0xe2, 0x14, 0x9b, 0x22);
		
		/// <summary>
		/// Storage for NomeScaffale
		/// </summary>
		private global::System.String nomeScaffalePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NomeScaffale domain property.
		/// Description for Company.MyDslCompartment.Scaffale.Nome Scaffale
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslCompartment.Scaffale/NomeScaffale.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslCompartment.Scaffale/NomeScaffale.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("437a559b-b675-461c-9a29-4c3ce2149b22")]
		public global::System.String NomeScaffale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nomeScaffalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NomeScaffalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Scaffale.NomeScaffale domain property.
		/// </summary>
		internal sealed partial class NomeScaffalePropertyHandler : DslModeling::DomainPropertyValueHandler<Scaffale, global::System.String>
		{
			private NomeScaffalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Scaffale.NomeScaffale domain property value handler.
			/// </summary>
			public static readonly NomeScaffalePropertyHandler Instance = new NomeScaffalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Scaffale.NomeScaffale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NomeScaffaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Scaffale element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nomeScaffalePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Scaffale element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nomeScaffalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for Company.MyDslCompartment.ExampleModelHasScaffale.Scaffale
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslCompartment.ExampleModelHasScaffale.ScaffaleDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslCompartment.ExampleModelHasScaffale.ScaffaleDomainRoleId, value);
			}
		}
		#endregion
		#region Libro opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Libro.
		/// Description for Company.MyDslCompartment.ScaffaleHasLibro.Scaffale
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Libro> Libro
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Libro>, Libro>(global::Company.MyDslCompartment.ScaffaleHasLibro.ScaffaleDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslCompartment.Libro.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslCompartment.Libro sourceLibro1 = sourceElement as global::Company.MyDslCompartment.Libro;
			if (sourceLibro1 != null)
			{
				// Create link for path ScaffaleHasLibro.Libro
				this.Libro.Add(sourceLibro1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslCompartment.Libro sourceLibro1 = sourceElement as global::Company.MyDslCompartment.Libro;
			if (sourceLibro1 != null)
			{
				// Delete link for path ScaffaleHasLibro.Libro
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslCompartment.ScaffaleHasLibro.GetLinks((global::Company.MyDslCompartment.Scaffale)this, sourceLibro1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslCompartment.ScaffaleHasLibro.ScaffaleDomainRoleId, global::Company.MyDslCompartment.ScaffaleHasLibro.LibroDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslCompartment
{
	/// <summary>
	/// DomainClass Libro
	/// Description for Company.MyDslCompartment.Libro
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslCompartment.Libro.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslCompartment.Libro.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("53da1899-ad1e-475c-9e1f-e28d945107d5")]
	public partial class Libro : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Libro domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x53da1899, 0xad1e, 0x475c, 0x9e, 0x1f, 0xe2, 0x8d, 0x94, 0x51, 0x07, 0xd5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Libro(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Libro(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TitoloLibro domain property code
		
		/// <summary>
		/// TitoloLibro domain property Id.
		/// </summary>
		public static readonly global::System.Guid TitoloLibroDomainPropertyId = new global::System.Guid(0xb2d8d324, 0xa669, 0x48af, 0xac, 0x6c, 0xdf, 0x48, 0x17, 0x2f, 0x3d, 0xd3);
		
		/// <summary>
		/// Storage for TitoloLibro
		/// </summary>
		private global::System.String titoloLibroPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TitoloLibro domain property.
		/// Description for Company.MyDslCompartment.Libro.Titolo Libro
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslCompartment.Libro/TitoloLibro.DisplayName", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslCompartment.Libro/TitoloLibro.Description", typeof(global::Company.MyDslCompartment.MyDslCompartmentDomainModel), "Company.MyDslCompartment.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b2d8d324-a669-48af-ac6c-df48172f3dd3")]
		public global::System.String TitoloLibro
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return titoloLibroPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TitoloLibroPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Libro.TitoloLibro domain property.
		/// </summary>
		internal sealed partial class TitoloLibroPropertyHandler : DslModeling::DomainPropertyValueHandler<Libro, global::System.String>
		{
			private TitoloLibroPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Libro.TitoloLibro domain property value handler.
			/// </summary>
			public static readonly TitoloLibroPropertyHandler Instance = new TitoloLibroPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Libro.TitoloLibro domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TitoloLibroDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Libro element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.titoloLibroPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Libro element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.titoloLibroPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scaffale opposite domain role accessor
		/// <summary>
		/// Gets or sets Scaffale.
		/// Description for Company.MyDslCompartment.ScaffaleHasLibro.Libro
		/// </summary>
		public virtual Scaffale Scaffale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslCompartment.ScaffaleHasLibro.LibroDomainRoleId) as Scaffale;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslCompartment.ScaffaleHasLibro.LibroDomainRoleId, value);
			}
		}
		#endregion
	}
}
