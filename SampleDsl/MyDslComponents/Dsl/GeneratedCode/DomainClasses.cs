//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ExampleModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ExampleModel.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ExampleModel.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d0496c9f-ce81-4d80-8eea-fd8d9e5b8006")]
	public partial class ExampleModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExampleModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0496c9f, 0xce81, 0x4d80, 0x8e, 0xea, 0xfd, 0x8d, 0x9e, 0x5b, 0x80, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MyButton opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyButton.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyButton> MyButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyButton>, MyButton>(global::Company.MyDslComponents.ExampleModelHasMyButton.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region MyTextbox opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyTextbox.
		/// Description for Company.MyDslComponents.ExampleModelHasMyTextbox.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyTextbox> MyTextbox
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyTextbox>, MyTextbox>(global::Company.MyDslComponents.ExampleModelHasMyTextbox.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region MyGauge opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MyGauge.
		/// Description for Company.MyDslComponents.ExampleModelHasMyGauge.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MyGauge> MyGauge
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MyGauge>, MyGauge>(global::Company.MyDslComponents.ExampleModelHasMyGauge.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslComponents.MyButton.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslComponents.MyTextbox.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslComponents.MyGauge.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslComponents.MyButton sourceMyButton1 = sourceElement as global::Company.MyDslComponents.MyButton;
			if (sourceMyButton1 != null)
			{
				// Create link for path ExampleModelHasMyButton.MyButton
				this.MyButton.Add(sourceMyButton1);

				return;
			}
				
			global::Company.MyDslComponents.MyTextbox sourceMyTextbox2 = sourceElement as global::Company.MyDslComponents.MyTextbox;
			if (sourceMyTextbox2 != null)
			{
				// Create link for path ExampleModelHasMyTextbox.MyTextbox
				this.MyTextbox.Add(sourceMyTextbox2);

				return;
			}
				
			global::Company.MyDslComponents.MyGauge sourceMyGauge3 = sourceElement as global::Company.MyDslComponents.MyGauge;
			if (sourceMyGauge3 != null)
			{
				// Create link for path ExampleModelHasMyGauge.MyGauge
				this.MyGauge.Add(sourceMyGauge3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslComponents.MyButton sourceMyButton1 = sourceElement as global::Company.MyDslComponents.MyButton;
			if (sourceMyButton1 != null)
			{
				// Delete link for path ExampleModelHasMyButton.MyButton
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslComponents.ExampleModelHasMyButton.GetLinks((global::Company.MyDslComponents.ExampleModel)this, sourceMyButton1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslComponents.ExampleModelHasMyButton.ExampleModelDomainRoleId, global::Company.MyDslComponents.ExampleModelHasMyButton.ElementDomainRoleId);
				}

				return;
			}
				
			global::Company.MyDslComponents.MyTextbox sourceMyTextbox2 = sourceElement as global::Company.MyDslComponents.MyTextbox;
			if (sourceMyTextbox2 != null)
			{
				// Delete link for path ExampleModelHasMyTextbox.MyTextbox
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslComponents.ExampleModelHasMyTextbox.GetLinks((global::Company.MyDslComponents.ExampleModel)this, sourceMyTextbox2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslComponents.ExampleModelHasMyTextbox.ExampleModelDomainRoleId, global::Company.MyDslComponents.ExampleModelHasMyTextbox.MyTextboxDomainRoleId);
				}

				return;
			}
				
			global::Company.MyDslComponents.MyGauge sourceMyGauge3 = sourceElement as global::Company.MyDslComponents.MyGauge;
			if (sourceMyGauge3 != null)
			{
				// Delete link for path ExampleModelHasMyGauge.MyGauge
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslComponents.ExampleModelHasMyGauge.GetLinks((global::Company.MyDslComponents.ExampleModel)this, sourceMyGauge3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslComponents.ExampleModelHasMyGauge.ExampleModelDomainRoleId, global::Company.MyDslComponents.ExampleModelHasMyGauge.MyGaugeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass MyButton
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.MyButton.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.MyButton.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0b0a9e8b-6ee9-48ad-b086-d9c4a0eba137")]
	public partial class MyButton : MyComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b0a9e8b, 0x6ee9, 0x48ad, 0xb0, 0x86, 0xd9, 0xc4, 0xa0, 0xeb, 0xa1, 0x37);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyButton(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyButton(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x05b92620, 0xfe5d, 0x4ce7, 0xb6, 0x13, 0x19, 0x60, 0x86, 0x6b, 0x20, 0x0c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDslComponents.MyButton.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.MyButton/Name.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.MyButton/Name.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("05b92620-fe5d-4ce7-b613-1960866b200c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyButton.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyButton, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyButton.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyButton.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x28783485, 0x1b33, 0x4e59, 0x8f, 0xca, 0x3c, 0x52, 0x72, 0xe6, 0x52, 0x8b);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MyDslComponents.MyButton.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.MyButton/Text.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.MyButton/Text.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("28783485-1b33-4e59-8fca-3c5272e6528b")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyButton.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<MyButton, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyButton.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyButton.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslComponents.ExampleModelHasMyButton.ElementDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslComponents.ExampleModelHasMyButton.ElementDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass MyTextbox
	/// Description for Company.MyDslComponents.MyTextbox
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.MyTextbox.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.MyTextbox.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("3e4bc35c-11f6-4f95-92d6-0ec304383641")]
	public partial class MyTextbox : MyComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyTextbox domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3e4bc35c, 0x11f6, 0x4f95, 0x92, 0xd6, 0x0e, 0xc3, 0x04, 0x38, 0x36, 0x41);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyTextbox(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyTextbox(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc5f27e70, 0xf554, 0x497b, 0xa2, 0x2e, 0xae, 0xb8, 0xdc, 0x69, 0x22, 0x8a);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDslComponents.MyTextbox.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.MyTextbox/Name.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.MyTextbox/Name.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c5f27e70-f554-497b-a22e-aeb8dc69228a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyTextbox.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyTextbox, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyTextbox.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyTextbox.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyTextbox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyTextbox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x608bc7ff, 0x4934, 0x4944, 0x98, 0x84, 0x0d, 0x8f, 0x2d, 0xaa, 0x6b, 0xbf);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MyDslComponents.MyTextbox.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.MyTextbox/Text.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.MyTextbox/Text.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("608bc7ff-4934-4944-9884-0d8f2daa6bbf")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyTextbox.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<MyTextbox, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyTextbox.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyTextbox.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyTextbox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyTextbox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for Company.MyDslComponents.ExampleModelHasMyTextbox.MyTextbox
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslComponents.ExampleModelHasMyTextbox.MyTextboxDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslComponents.ExampleModelHasMyTextbox.MyTextboxDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass MyGauge
	/// Description for Company.MyDslComponents.MyGauge
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.MyGauge.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.MyGauge.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9a2e1c4e-7437-492e-8fcf-325e93b8a3a8")]
	public partial class MyGauge : MyComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyGauge domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9a2e1c4e, 0x7437, 0x492e, 0x8f, 0xcf, 0x32, 0x5e, 0x93, 0xb8, 0xa3, 0xa8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyGauge(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyGauge(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RangeStart domain property code
		
		/// <summary>
		/// RangeStart domain property Id.
		/// </summary>
		public static readonly global::System.Guid RangeStartDomainPropertyId = new global::System.Guid(0x52f9f926, 0x79c9, 0x446e, 0xa3, 0x70, 0xa4, 0xc6, 0x96, 0x41, 0x93, 0x19);
		
		/// <summary>
		/// Storage for RangeStart
		/// </summary>
		private global::System.Int32 rangeStartPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RangeStart domain property.
		/// Description for Company.MyDslComponents.MyGauge.Range Start
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.MyGauge/RangeStart.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.MyGauge/RangeStart.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("52f9f926-79c9-446e-a370-a4c696419319")]
		public global::System.Int32 RangeStart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rangeStartPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RangeStartPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyGauge.RangeStart domain property.
		/// </summary>
		internal sealed partial class RangeStartPropertyHandler : DslModeling::DomainPropertyValueHandler<MyGauge, global::System.Int32>
		{
			private RangeStartPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyGauge.RangeStart domain property value handler.
			/// </summary>
			public static readonly RangeStartPropertyHandler Instance = new RangeStartPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyGauge.RangeStart domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RangeStartDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(MyGauge element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rangeStartPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyGauge element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rangeStartPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RangeEnd domain property code
		
		/// <summary>
		/// RangeEnd domain property Id.
		/// </summary>
		public static readonly global::System.Guid RangeEndDomainPropertyId = new global::System.Guid(0xe2d7dd5d, 0x3fc2, 0x4b38, 0x83, 0x9e, 0xcd, 0xdb, 0x2a, 0x6b, 0xfe, 0x7a);
		
		/// <summary>
		/// Storage for RangeEnd
		/// </summary>
		private global::System.Int32 rangeEndPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RangeEnd domain property.
		/// Description for Company.MyDslComponents.MyGauge.Range End
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.MyGauge/RangeEnd.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.MyGauge/RangeEnd.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e2d7dd5d-3fc2-4b38-839e-cddb2a6bfe7a")]
		public global::System.Int32 RangeEnd
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rangeEndPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RangeEndPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyGauge.RangeEnd domain property.
		/// </summary>
		internal sealed partial class RangeEndPropertyHandler : DslModeling::DomainPropertyValueHandler<MyGauge, global::System.Int32>
		{
			private RangeEndPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyGauge.RangeEnd domain property value handler.
			/// </summary>
			public static readonly RangeEndPropertyHandler Instance = new RangeEndPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyGauge.RangeEnd domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RangeEndDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(MyGauge element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rangeEndPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyGauge element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rangeEndPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb4a03819, 0xd372, 0x45ea, 0x9c, 0xab, 0xe1, 0xec, 0x20, 0x2f, 0x61, 0x05);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDslComponents.MyGauge.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.MyGauge/Name.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.MyGauge/Name.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("b4a03819-d372-45ea-9cab-e1ec202f6105")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MyGauge.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MyGauge, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MyGauge.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MyGauge.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MyGauge element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MyGauge element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for Company.MyDslComponents.ExampleModelHasMyGauge.MyGauge
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslComponents.ExampleModelHasMyGauge.MyGaugeDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslComponents.ExampleModelHasMyGauge.MyGaugeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass MyComponent
	/// Description for Company.MyDslComponents.MyComponent
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.MyComponent.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.MyComponent.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5fa966a9-84fb-467e-9189-06278eaecfba")]
	public abstract partial class MyComponent : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5fa966a9, 0x84fb, 0x467e, 0x91, 0x89, 0x06, 0x27, 0x8e, 0xae, 0xcf, 0xba);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected MyComponent(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
