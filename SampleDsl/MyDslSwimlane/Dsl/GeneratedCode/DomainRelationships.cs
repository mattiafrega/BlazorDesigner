//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslSwimlane
{
	/// <summary>
	/// DomainRelationship ExampleModelHasMySwimLane
	/// Description for Company.MyDslSwimlane.ExampleModelHasMySwimLane
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslSwimlane.ExampleModelHasMySwimLane.DisplayName", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslSwimlane.ExampleModelHasMySwimLane.Description", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("763e173f-9b80-4a79-a06b-13fc02af6b9d")]
	public partial class ExampleModelHasMySwimLane : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasMySwimLane domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x763e173f, 0x9b80, 0x4a79, 0xa0, 0x6b, 0x13, 0xfc, 0x02, 0xaf, 0x6b, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasMySwimLane link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">MySwimLane to use as the target of the relationship.</param>
		public ExampleModelHasMySwimLane(ExampleModel source, MySwimLane target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasMySwimLane.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasMySwimLane.MySwimLaneDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasMySwimLane(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasMySwimLane(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasMySwimLane(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasMySwimLane(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0x061ede82, 0xf563, 0x4925, 0x9d, 0xd0, 0x04, 0x3b, 0xd2, 0x77, 0x3e, 0xfe);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// Description for Company.MyDslSwimlane.ExampleModelHasMySwimLane.ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslSwimlane.ExampleModelHasMySwimLane/ExampleModel.DisplayName", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslSwimlane.ExampleModelHasMySwimLane/ExampleModel.Description", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MySwimLane", PropertyDisplayNameKey="Company.MyDslSwimlane.ExampleModelHasMySwimLane/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("061ede82-f563-4925-9dd0-043bd2773efe")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a MySwimLane
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(MySwimLane element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MySwimLaneDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(MySwimLane element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MySwimLaneDomainRoleId, newExampleModel);
		}
		#endregion
		#region MySwimLane domain role code
		
		/// <summary>
		/// MySwimLane domain role Id.
		/// </summary>
		public static readonly global::System.Guid MySwimLaneDomainRoleId = new global::System.Guid(0x73eb1667, 0x415b, 0x49d5, 0xa1, 0x09, 0xb8, 0x01, 0xe5, 0x29, 0x04, 0x59);
		
		/// <summary>
		/// DomainRole MySwimLane
		/// Description for Company.MyDslSwimlane.ExampleModelHasMySwimLane.MySwimLane
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslSwimlane.ExampleModelHasMySwimLane/MySwimLane.DisplayName", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslSwimlane.ExampleModelHasMySwimLane/MySwimLane.Description", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.MyDslSwimlane.ExampleModelHasMySwimLane/MySwimLane.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("73eb1667-415b-49d5-a109-b801e5290459")]
		public virtual MySwimLane MySwimLane
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MySwimLane)DslModeling::DomainRoleInfo.GetRolePlayer(this, MySwimLaneDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MySwimLaneDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MySwimLane of a ExampleModel
		/// <summary>
		/// Gets a list of MySwimLane.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MySwimLane> GetMySwimLane(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MySwimLane>, MySwimLane>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasMySwimLane links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane> GetLinksToMySwimLane ( global::Company.MyDslSwimlane.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane>(exampleModelInstance, global::Company.MyDslSwimlane.ExampleModelHasMySwimLane.ExampleModelDomainRoleId);
		}
		#endregion
		#region MySwimLane link accessor
		/// <summary>
		/// Get the ExampleModelHasMySwimLane link to a MySwimLane.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslSwimlane.ExampleModelHasMySwimLane GetLinkToExampleModel (global::Company.MyDslSwimlane.MySwimLane mySwimLaneInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane>(mySwimLaneInstance, global::Company.MyDslSwimlane.ExampleModelHasMySwimLane.MySwimLaneDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MySwimLane not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasMySwimLane instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasMySwimLane links between a given ExampleModel and a MySwimLane.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane> GetLinks( global::Company.MyDslSwimlane.ExampleModel source, global::Company.MyDslSwimlane.MySwimLane target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane>();
			global::System.Collections.Generic.IList<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane>(source, global::Company.MyDslSwimlane.ExampleModelHasMySwimLane.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslSwimlane.ExampleModelHasMySwimLane link in links )
			{
				if ( target.Equals(link.MySwimLane) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasMySwimLane link between a given ExampleModeland a MySwimLane.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslSwimlane.ExampleModelHasMySwimLane GetLink( global::Company.MyDslSwimlane.ExampleModel source, global::Company.MyDslSwimlane.MySwimLane target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.ExampleModelHasMySwimLane>(source, global::Company.MyDslSwimlane.ExampleModelHasMySwimLane.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslSwimlane.ExampleModelHasMySwimLane link in links )
			{
				if ( target.Equals(link.MySwimLane) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslSwimlane
{
	/// <summary>
	/// DomainRelationship MySwimLaneHasMyButton
	/// Description for Company.MyDslSwimlane.MySwimLaneHasMyButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslSwimlane.MySwimLaneHasMyButton.DisplayName", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslSwimlane.MySwimLaneHasMyButton.Description", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d9e0d97c-6a0f-4242-b266-ddd7e4f22d38")]
	public partial class MySwimLaneHasMyButton : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MySwimLaneHasMyButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd9e0d97c, 0x6a0f, 0x4242, 0xb2, 0x66, 0xdd, 0xd7, 0xe4, 0xf2, 0x2d, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MySwimLaneHasMyButton link in the same Partition as the given MySwimLane
		/// </summary>
		/// <param name="source">MySwimLane to use as the source of the relationship.</param>
		/// <param name="target">MyButton to use as the target of the relationship.</param>
		public MySwimLaneHasMyButton(MySwimLane source, MyButton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MySwimLaneHasMyButton.MySwimLaneDomainRoleId, source), new DslModeling::RoleAssignment(MySwimLaneHasMyButton.MyButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MySwimLaneHasMyButton(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MySwimLaneHasMyButton(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MySwimLaneHasMyButton(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MySwimLaneHasMyButton(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MySwimLane domain role code
		
		/// <summary>
		/// MySwimLane domain role Id.
		/// </summary>
		public static readonly global::System.Guid MySwimLaneDomainRoleId = new global::System.Guid(0x92d9ec0b, 0x4218, 0x43d3, 0xb9, 0x48, 0xd5, 0x2d, 0xb5, 0xcc, 0xc7, 0x39);
		
		/// <summary>
		/// DomainRole MySwimLane
		/// Description for Company.MyDslSwimlane.MySwimLaneHasMyButton.MySwimLane
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslSwimlane.MySwimLaneHasMyButton/MySwimLane.DisplayName", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslSwimlane.MySwimLaneHasMyButton/MySwimLane.Description", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyButton", PropertyDisplayNameKey="Company.MyDslSwimlane.MySwimLaneHasMyButton/MySwimLane.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92d9ec0b-4218-43d3-b948-d52db5ccc739")]
		public virtual MySwimLane MySwimLane
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MySwimLane)DslModeling::DomainRoleInfo.GetRolePlayer(this, MySwimLaneDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MySwimLaneDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MySwimLane of a MyButton
		/// <summary>
		/// Gets MySwimLane.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MySwimLane GetMySwimLane(MyButton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MyButtonDomainRoleId) as MySwimLane;
		}
		
		/// <summary>
		/// Sets MySwimLane.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMySwimLane(MyButton element, MySwimLane newMySwimLane)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MyButtonDomainRoleId, newMySwimLane);
		}
		#endregion
		#region MyButton domain role code
		
		/// <summary>
		/// MyButton domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyButtonDomainRoleId = new global::System.Guid(0x49f258bc, 0xff33, 0x4452, 0x8b, 0x52, 0xa3, 0x3e, 0xa9, 0x3e, 0x4f, 0xb6);
		
		/// <summary>
		/// DomainRole MyButton
		/// Description for Company.MyDslSwimlane.MySwimLaneHasMyButton.MyButton
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslSwimlane.MySwimLaneHasMyButton/MyButton.DisplayName", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslSwimlane.MySwimLaneHasMyButton/MyButton.Description", typeof(global::Company.MyDslSwimlane.MyDslSwimlaneDomainModel), "Company.MyDslSwimlane.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MySwimLane", PropertyDisplayNameKey="Company.MyDslSwimlane.MySwimLaneHasMyButton/MyButton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("49f258bc-ff33-4452-8b52-a33ea93e4fb6")]
		public virtual MyButton MyButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyButton)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyButton of a MySwimLane
		/// <summary>
		/// Gets a list of MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyButton> GetMyButton(MySwimLane element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyButton>, MyButton>(element, MySwimLaneDomainRoleId);
		}
		#endregion
		#region MySwimLane link accessor
		/// <summary>
		/// Get the list of MySwimLaneHasMyButton links to a MySwimLane.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslSwimlane.MySwimLaneHasMyButton> GetLinksToMyButton ( global::Company.MyDslSwimlane.MySwimLane mySwimLaneInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.MySwimLaneHasMyButton>(mySwimLaneInstance, global::Company.MyDslSwimlane.MySwimLaneHasMyButton.MySwimLaneDomainRoleId);
		}
		#endregion
		#region MyButton link accessor
		/// <summary>
		/// Get the MySwimLaneHasMyButton link to a MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslSwimlane.MySwimLaneHasMyButton GetLinkToMySwimLane (global::Company.MyDslSwimlane.MyButton myButtonInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslSwimlane.MySwimLaneHasMyButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.MySwimLaneHasMyButton>(myButtonInstance, global::Company.MyDslSwimlane.MySwimLaneHasMyButton.MyButtonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MyButton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MySwimLaneHasMyButton instance accessors
		
		/// <summary>
		/// Get any MySwimLaneHasMyButton links between a given MySwimLane and a MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslSwimlane.MySwimLaneHasMyButton> GetLinks( global::Company.MyDslSwimlane.MySwimLane source, global::Company.MyDslSwimlane.MyButton target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslSwimlane.MySwimLaneHasMyButton> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslSwimlane.MySwimLaneHasMyButton>();
			global::System.Collections.Generic.IList<global::Company.MyDslSwimlane.MySwimLaneHasMyButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.MySwimLaneHasMyButton>(source, global::Company.MyDslSwimlane.MySwimLaneHasMyButton.MySwimLaneDomainRoleId);
			foreach ( global::Company.MyDslSwimlane.MySwimLaneHasMyButton link in links )
			{
				if ( target.Equals(link.MyButton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MySwimLaneHasMyButton link between a given MySwimLaneand a MyButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslSwimlane.MySwimLaneHasMyButton GetLink( global::Company.MyDslSwimlane.MySwimLane source, global::Company.MyDslSwimlane.MyButton target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslSwimlane.MySwimLaneHasMyButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslSwimlane.MySwimLaneHasMyButton>(source, global::Company.MyDslSwimlane.MySwimLaneHasMyButton.MySwimLaneDomainRoleId);
			foreach ( global::Company.MyDslSwimlane.MySwimLaneHasMyButton link in links )
			{
				if ( target.Equals(link.MyButton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
