//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Company.MyDSL.MyDSLDiagram")]

namespace Company.MyDSL
{
	/// <summary>
	/// DomainClass MyDSLDiagram
	/// Description for Company.MyDSL.MyDSLDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDSL.MyDSLDiagram.DisplayName", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDSL.MyDSLDiagram.Description", typeof(global::Company.MyDSL.MyDSLDomainModel), "Company.MyDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDSL.MyDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5df3a0bd-fe14-4b93-85e0-adfe6b0da000")]
	public partial class MyDSLDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Company.MyDSL.MyDSLToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Swimlane support
		
		/// <summary>
		/// Gets whether or not swimlanes are supported in this Diagram.
		/// </summary>
		public override bool HasSwimlanes
		{
			get { return true; }
		}
		
		/// <summary>
		/// Initializes the starting swimlanes in a new Diagram.
		/// </summary>
		/// <remarks>
		/// This method is not called during successful deserialization, only when either a blank diagram is created or diagram deserialization fails and a diagram is created to make things work.
		/// 
		/// This method does not create shapes for swimlanes with shape maps specified in the DSL definition, only those swimlanes which are not mapped.
		/// The assumption here is that if a swimlane is mapped to a domain class, then an instance of that class  will be created when the element mapped to the diagram is created,
		/// and swimlane shapes will be created as part of view fixup.
		/// </remarks>
		internal virtual void InitializeSwimlanes()
		{
		}
		
		/// <summary>
		/// Gets a collection of domain classes which are mapped to swimlane shapes.
		/// </summary>
		public override sealed global::System.Collections.Generic.IEnumerable<DslModeling::DomainClassInfo> CreatableSwimLaneSubjects
		{
			get
			{
				yield return this.Store.DomainDataDirectory.GetDomainClass(typeof(global::Company.MyDSL.Swim));
			}
		}
		
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Company.MyDSL.MyPanel)
			{
				global::Company.MyDSL.MyPanelShape newShape = new global::Company.MyDSL.MyPanelShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDSL.MyButton)
			{
				global::Company.MyDSL.MyButtonShape newShape = new global::Company.MyDSL.MyButtonShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDSL.MyInput)
			{
				global::Company.MyDSL.MyInputShape newShape = new global::Company.MyDSL.MyInputShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDSL.MyWatch)
			{
				global::Company.MyDSL.MyWatchShape newShape = new global::Company.MyDSL.MyWatchShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDSL.MyWiFi)
			{
				global::Company.MyDSL.MyWiFiShape newShape = new global::Company.MyDSL.MyWiFiShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDSL.MySetting)
			{
				global::Company.MyDSL.MySettingShape newShape = new global::Company.MyDSL.MySettingShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDSL.MyCart)
			{
				global::Company.MyDSL.MyCartShape newShape = new global::Company.MyDSL.MyCartShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Company.MyDSL.Swim)
			{
				global::Company.MyDSL.LayoutSwimLane newShape = new global::Company.MyDSL.LayoutSwimLane(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Company.MyDSL.MyPanelShape.DecoratorsInitialized += MyPanelShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.MyDSL.MyButtonShape.DecoratorsInitialized += MyButtonShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.MyDSL.MyInputShape.DecoratorsInitialized += MyInputShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.MyDSL.MyWatchShape.DecoratorsInitialized += MyWatchShapeDecoratorMap.OnDecoratorsInitialized;
			global::Company.MyDSL.LayoutSwimLane.DecoratorsInitialized += LayoutSwimLaneDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MyPanelShape.
		/// </summary>
		internal static partial class MyPanelShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MyPanelShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDSL.MyPanel.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MyButtonShape.
		/// </summary>
		internal static partial class MyButtonShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MyButtonShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDSL.MyButton.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MyInputShape.
		/// </summary>
		internal static partial class MyInputShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MyInputShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDSL.MyInput.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDSL.MyInput.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MyWatchShape.
		/// </summary>
		internal static partial class MyWatchShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MyWatchShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDSL.MyWatch.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for LayoutSwimLane.
		/// </summary>
		internal static partial class LayoutSwimLaneDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for LayoutSwimLane.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Company.MyDSL.Swim.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SwimName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// MyDSLDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5df3a0bd, 0xfe14, 0x4b93, 0x85, 0xe0, 0xad, 0xfe, 0x6b, 0x0d, 0xa0, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyDSLDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MyDSLDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.MyDSL
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.MyPanel), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.MyButton), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.MyInput), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.MyWatch), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.MyWiFi), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.MySetting), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.MyCart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Company.MyDSL.Swim), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::Company.MyDSL.MyPanel)
				{
					parentElement = GetParentForMyPanel((global::Company.MyDSL.MyPanel)childElement);
				} else
				if(childElement is global::Company.MyDSL.MyButton)
				{
					parentElement = GetParentForMyButton((global::Company.MyDSL.MyButton)childElement);
				} else
				if(childElement is global::Company.MyDSL.MyInput)
				{
					parentElement = GetParentForMyInput((global::Company.MyDSL.MyInput)childElement);
				} else
				if(childElement is global::Company.MyDSL.MyWatch)
				{
					parentElement = GetParentForMyWatch((global::Company.MyDSL.MyWatch)childElement);
				} else
				if(childElement is global::Company.MyDSL.MyWiFi)
				{
					parentElement = GetParentForMyWiFi((global::Company.MyDSL.MyWiFi)childElement);
				} else
				if(childElement is global::Company.MyDSL.MySetting)
				{
					parentElement = GetParentForMySetting((global::Company.MyDSL.MySetting)childElement);
				} else
				if(childElement is global::Company.MyDSL.MyCart)
				{
					parentElement = GetParentForMyCart((global::Company.MyDSL.MyCart)childElement);
				} else
				if(childElement is global::Company.MyDSL.Swim)
				{
					parentElement = GetParentForSwim((global::Company.MyDSL.Swim)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Company.MyDSL.ExampleModel GetParentForMyPanel( global::Company.MyDSL.MyPanel root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.ExampleModel result = root.ExampleModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDSL.Swim GetParentForMyButton( global::Company.MyDSL.MyCompBase root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.Swim result = root.Swim;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDSL.Swim GetParentForMyInput( global::Company.MyDSL.MyCompBase root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.Swim result = root.Swim;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDSL.Swim GetParentForMyWatch( global::Company.MyDSL.MyCompBase root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.Swim result = root.Swim;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDSL.ExampleModel GetParentForSwim( global::Company.MyDSL.Swim root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.ExampleModel result = root.ExampleModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDSL.Swim GetParentForMyWiFi( global::Company.MyDSL.MyCompBase root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.Swim result = root.Swim;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDSL.Swim GetParentForMySetting( global::Company.MyDSL.MyCompBase root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.Swim result = root.Swim;
				if ( result == null ) return null;
				return result;
			}
			public static global::Company.MyDSL.Swim GetParentForMyCart( global::Company.MyDSL.MyCompBase root )
			{
				// Segments 0 and 1
				global::Company.MyDSL.Swim result = root.Swim;
				if ( result == null ) return null;
				return result;
			}
		}
		
	
	}
