//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.NamedElement.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.NamedElement.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("f7646cfd-9622-4814-966e-7d28a9fb898b")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf7646cfd, 0x9622, 0x4814, 0x96, 0x6e, 0x7d, 0x28, 0xa9, 0xfb, 0x89, 0x8b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf951ddef, 0xfbb9, 0x4282, 0x93, 0xa4, 0x1e, 0x58, 0x10, 0x64, 0xb2, 0x97);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.NamedElement/Name.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.NamedElement/Name.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f951ddef-fbb9-4282-93a4-1e581064b297")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainClass ComponentModel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentModel.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentModel.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("73a5861e-6db9-4099-96e4-eafa87c22a8f")]
	public partial class ComponentModel : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ComponentModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73a5861e, 0x6db9, 0x4099, 0x96, 0xe4, 0xea, 0xfa, 0x87, 0xc2, 0x2a, 0x8f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Company.MyDslPorts.ComponentModelHasComments.ComponentModelDomainRoleId);
			}
		}
		#endregion
		#region Components opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Components.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Component> Components
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Component>, Component>(global::Company.MyDslPorts.ComponentModelHasComponents.ComponentModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslPorts.Component.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslPorts.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslPorts.Component sourceComponent1 = sourceElement as global::Company.MyDslPorts.Component;
			if (sourceComponent1 != null)
			{
				// Create link for path ComponentModelHasComponents.Components
				this.Components.Add(sourceComponent1);

				return;
			}
				
			global::Company.MyDslPorts.Comment sourceComment2 = sourceElement as global::Company.MyDslPorts.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path ComponentModelHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslPorts.Component sourceComponent1 = sourceElement as global::Company.MyDslPorts.Component;
			if (sourceComponent1 != null)
			{
				// Delete link for path ComponentModelHasComponents.Components
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslPorts.ComponentModelHasComponents.GetLinks((global::Company.MyDslPorts.ComponentModel)this, sourceComponent1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslPorts.ComponentModelHasComponents.ComponentModelDomainRoleId, global::Company.MyDslPorts.ComponentModelHasComponents.ComponentDomainRoleId);
				}

				return;
			}
				
			global::Company.MyDslPorts.Comment sourceComment2 = sourceElement as global::Company.MyDslPorts.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path ComponentModelHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslPorts.ComponentModelHasComments.GetLinks((global::Company.MyDslPorts.ComponentModel)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslPorts.ComponentModelHasComments.ComponentModelDomainRoleId, global::Company.MyDslPorts.ComponentModelHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainClass Component
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.Component.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.Component.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("16cb16e8-7a56-478f-ac6a-b0eeac84fd76")]
	public partial class Component : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Component domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16cb16e8, 0x7a56, 0x478f, 0xac, 0x6a, 0xb0, 0xee, 0xac, 0x84, 0xfd, 0x76);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Component(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Component(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Kind domain property code
		
		/// <summary>
		/// Kind domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainPropertyId = new global::System.Guid(0xb31b8cc7, 0x8cf0, 0x473b, 0x9a, 0x60, 0xf9, 0x0a, 0x66, 0xd7, 0x18, 0x55);
		
		/// <summary>
		/// Storage for Kind
		/// </summary>
		private global::System.String kindPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Kind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.Component/Kind.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.Component/Kind.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("b31b8cc7-8cf0-473b-9a60-f90a66d71855")]
		public global::System.String Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return kindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Component.Kind domain property.
		/// </summary>
		internal sealed partial class KindPropertyHandler : DslModeling::DomainPropertyValueHandler<Component, global::System.String>
		{
			private KindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Component.Kind domain property value handler.
			/// </summary>
			public static readonly KindPropertyHandler Instance = new KindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Component.Kind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Component element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.kindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Component element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.kindPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Ports opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ComponentPort> Ports
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ComponentPort>, ComponentPort>(global::Company.MyDslPorts.ComponentHasPorts.ComponentDomainRoleId);
			}
		}
		#endregion
		#region ComponentModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ComponentModel.
		/// </summary>
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslPorts.ComponentModelHasComponents.ComponentDomainRoleId) as ComponentModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslPorts.ComponentModelHasComponents.ComponentDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslPorts.ComponentPort.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslPorts.ComponentPort sourceComponentPort1 = sourceElement as global::Company.MyDslPorts.ComponentPort;
			if (sourceComponentPort1 != null)
			{
				// Create link for path ComponentHasPorts.Ports
				this.Ports.Add(sourceComponentPort1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslPorts.ComponentPort sourceComponentPort1 = sourceElement as global::Company.MyDslPorts.ComponentPort;
			if (sourceComponentPort1 != null)
			{
				// Delete link for path ComponentHasPorts.Ports
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslPorts.ComponentHasPorts.GetLinks((global::Company.MyDslPorts.Component)this, sourceComponentPort1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslPorts.ComponentHasPorts.ComponentDomainRoleId, global::Company.MyDslPorts.ComponentHasPorts.PortDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainClass ComponentPort
	/// Description for Company.MyDslPorts.ComponentPort
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentPort.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentPort.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d5ee0f91-0e6e-450e-a767-ad48cf0c1552")]
	public abstract partial class ComponentPort : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ComponentPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd5ee0f91, 0x0e6e, 0x450e, 0xa7, 0x67, 0xad, 0x48, 0xcf, 0x0c, 0x15, 0x52);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ComponentPort(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Component opposite domain role accessor
		/// <summary>
		/// Gets or sets Component.
		/// </summary>
		public virtual Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslPorts.ComponentHasPorts.PortDomainRoleId) as Component;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslPorts.ComponentHasPorts.PortDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainClass InPort
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.InPort.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.InPort.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e3f53686-20da-45c5-9367-6e153e465383")]
	public partial class InPort : ComponentPort
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe3f53686, 0x20da, 0x45c5, 0x93, 0x67, 0x6e, 0x15, 0x3e, 0x46, 0x53, 0x83);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InPort(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InPort(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<OutPort> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<OutPort>, OutPort>(global::Company.MyDslPorts.Connection.TargetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainClass OutPort
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.OutPort.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.OutPort.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("05264538-2c05-42c1-98ab-6a28d624699d")]
	public partial class OutPort : ComponentPort
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OutPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05264538, 0x2c05, 0x42c1, 0x98, 0xab, 0x6a, 0x28, 0xd6, 0x24, 0x69, 0x9d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutPort(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutPort(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InPort> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InPort>, InPort>(global::Company.MyDslPorts.Connection.SourceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.Comment.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.Comment.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8ac6f1a6-77be-4d25-aca8-3097360319ce")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ac6f1a6, 0x77be, 0x4d25, 0xac, 0xa8, 0x30, 0x97, 0x36, 0x03, 0x19, 0xce);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xe44a201f, 0xc951, 0x4eba, 0xa8, 0x6a, 0xea, 0xf2, 0x63, 0x7e, 0xe4, 0x4d);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.Comment/Text.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.Comment/Text.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("e44a201f-c951-4eba-a86a-eaf2637ee44d")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ComponentModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ComponentModel.
		/// </summary>
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslPorts.ComponentModelHasComments.CommentDomainRoleId) as ComponentModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslPorts.ComponentModelHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
	}
}
