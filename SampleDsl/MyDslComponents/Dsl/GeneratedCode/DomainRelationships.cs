//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainRelationship ITxModelHasITxComponent
	/// Description for Company.MyDslComponents.ITxModelHasITxComponent
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxModelHasITxComponent.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxModelHasITxComponent.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c949fabb-8e5e-43a9-9ccc-7374401c4628")]
	public partial class ITxModelHasITxComponent : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ITxModelHasITxComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc949fabb, 0x8e5e, 0x43a9, 0x9c, 0xcc, 0x73, 0x74, 0x40, 0x1c, 0x46, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ITxModelHasITxComponent link in the same Partition as the given ITxModel
		/// </summary>
		/// <param name="source">ITxModel to use as the source of the relationship.</param>
		/// <param name="target">ITxComponent to use as the target of the relationship.</param>
		public ITxModelHasITxComponent(ITxModel source, ITxComponent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ITxModelHasITxComponent.ITxModelDomainRoleId, source), new DslModeling::RoleAssignment(ITxModelHasITxComponent.ITxComponentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ITxModelHasITxComponent(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ITxModelHasITxComponent(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ITxModelHasITxComponent(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ITxModelHasITxComponent(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ITxModel domain role code
		
		/// <summary>
		/// ITxModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ITxModelDomainRoleId = new global::System.Guid(0x74e74376, 0x6693, 0x480d, 0x8f, 0xd9, 0x4e, 0xa6, 0xa2, 0x65, 0x8b, 0x9b);
		
		/// <summary>
		/// DomainRole ITxModel
		/// Description for Company.MyDslComponents.ITxModelHasITxComponent.ITxModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxModelHasITxComponent/ITxModel.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxModelHasITxComponent/ITxModel.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ITxComponent", PropertyDisplayNameKey="Company.MyDslComponents.ITxModelHasITxComponent/ITxModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("74e74376-6693-480d-8fd9-4ea6a2658b9b")]
		public virtual ITxModel ITxModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ITxModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ITxModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ITxModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ITxModel of a ITxComponent
		/// <summary>
		/// Gets ITxModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ITxModel GetITxModel(ITxComponent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ITxComponentDomainRoleId) as ITxModel;
		}
		
		/// <summary>
		/// Sets ITxModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetITxModel(ITxComponent element, ITxModel newITxModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ITxComponentDomainRoleId, newITxModel);
		}
		#endregion
		#region ITxComponent domain role code
		
		/// <summary>
		/// ITxComponent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ITxComponentDomainRoleId = new global::System.Guid(0x5f9e1926, 0x1be8, 0x493e, 0xa3, 0xf5, 0x2c, 0xe8, 0x57, 0x97, 0x41, 0x6b);
		
		/// <summary>
		/// DomainRole ITxComponent
		/// Description for Company.MyDslComponents.ITxModelHasITxComponent.ITxComponent
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxModelHasITxComponent/ITxComponent.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxModelHasITxComponent/ITxComponent.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ITxModel", PropertyDisplayNameKey="Company.MyDslComponents.ITxModelHasITxComponent/ITxComponent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5f9e1926-1be8-493e-a3f5-2ce85797416b")]
		public virtual ITxComponent ITxComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ITxComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ITxComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ITxComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ITxComponent of a ITxModel
		/// <summary>
		/// Gets a list of ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ITxComponent> GetITxComponent(ITxModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ITxComponent>, ITxComponent>(element, ITxModelDomainRoleId);
		}
		#endregion
		#region ITxModel link accessor
		/// <summary>
		/// Get the list of ITxModelHasITxComponent links to a ITxModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslComponents.ITxModelHasITxComponent> GetLinksToITxComponent ( global::Company.MyDslComponents.ITxModel iTxModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxModelHasITxComponent>(iTxModelInstance, global::Company.MyDslComponents.ITxModelHasITxComponent.ITxModelDomainRoleId);
		}
		#endregion
		#region ITxComponent link accessor
		/// <summary>
		/// Get the ITxModelHasITxComponent link to a ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslComponents.ITxModelHasITxComponent GetLinkToITxModel (global::Company.MyDslComponents.ITxComponent iTxComponentInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslComponents.ITxModelHasITxComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxModelHasITxComponent>(iTxComponentInstance, global::Company.MyDslComponents.ITxModelHasITxComponent.ITxComponentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ITxComponent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ITxModelHasITxComponent instance accessors
		
		/// <summary>
		/// Get any ITxModelHasITxComponent links between a given ITxModel and a ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslComponents.ITxModelHasITxComponent> GetLinks( global::Company.MyDslComponents.ITxModel source, global::Company.MyDslComponents.ITxComponent target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslComponents.ITxModelHasITxComponent> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslComponents.ITxModelHasITxComponent>();
			global::System.Collections.Generic.IList<global::Company.MyDslComponents.ITxModelHasITxComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxModelHasITxComponent>(source, global::Company.MyDslComponents.ITxModelHasITxComponent.ITxModelDomainRoleId);
			foreach ( global::Company.MyDslComponents.ITxModelHasITxComponent link in links )
			{
				if ( target.Equals(link.ITxComponent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ITxModelHasITxComponent link between a given ITxModeland a ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslComponents.ITxModelHasITxComponent GetLink( global::Company.MyDslComponents.ITxModel source, global::Company.MyDslComponents.ITxComponent target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslComponents.ITxModelHasITxComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxModelHasITxComponent>(source, global::Company.MyDslComponents.ITxModelHasITxComponent.ITxModelDomainRoleId);
			foreach ( global::Company.MyDslComponents.ITxModelHasITxComponent link in links )
			{
				if ( target.Equals(link.ITxComponent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainRelationship ITxContainerHasITxComponent
	/// Description for Company.MyDslComponents.ITxContainerHasITxComponent
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxContainerHasITxComponent.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxContainerHasITxComponent.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6bf93da7-f403-43e7-8be3-17201722f99e")]
	public partial class ITxContainerHasITxComponent : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ITxContainerHasITxComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6bf93da7, 0xf403, 0x43e7, 0x8b, 0xe3, 0x17, 0x20, 0x17, 0x22, 0xf9, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ITxContainerHasITxComponent link in the same Partition as the given ITxContainer
		/// </summary>
		/// <param name="source">ITxContainer to use as the source of the relationship.</param>
		/// <param name="target">ITxComponent to use as the target of the relationship.</param>
		public ITxContainerHasITxComponent(ITxContainer source, ITxComponent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ITxContainerHasITxComponent.ITxContainerDomainRoleId, source), new DslModeling::RoleAssignment(ITxContainerHasITxComponent.ITxComponentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ITxContainerHasITxComponent(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ITxContainerHasITxComponent(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ITxContainerHasITxComponent(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ITxContainerHasITxComponent(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ITxContainer domain role code
		
		/// <summary>
		/// ITxContainer domain role Id.
		/// </summary>
		public static readonly global::System.Guid ITxContainerDomainRoleId = new global::System.Guid(0x49f0e289, 0x5b4e, 0x4993, 0xb1, 0xbd, 0xf8, 0x4d, 0xfc, 0xbd, 0x0d, 0x16);
		
		/// <summary>
		/// DomainRole ITxContainer
		/// Description for Company.MyDslComponents.ITxContainerHasITxComponent.ITxContainer
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxContainerHasITxComponent/ITxContainer.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxContainerHasITxComponent/ITxContainer.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ITxComponent", PropertyDisplayNameKey="Company.MyDslComponents.ITxContainerHasITxComponent/ITxContainer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("49f0e289-5b4e-4993-b1bd-f84dfcbd0d16")]
		public virtual ITxContainer ITxContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ITxContainer)DslModeling::DomainRoleInfo.GetRolePlayer(this, ITxContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ITxContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ITxContainer of a ITxComponent
		/// <summary>
		/// Gets ITxContainer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ITxContainer GetITxContainer(ITxComponent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ITxComponentDomainRoleId) as ITxContainer;
		}
		
		/// <summary>
		/// Sets ITxContainer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetITxContainer(ITxComponent element, ITxContainer newITxContainer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ITxComponentDomainRoleId, newITxContainer);
		}
		#endregion
		#region ITxComponent domain role code
		
		/// <summary>
		/// ITxComponent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ITxComponentDomainRoleId = new global::System.Guid(0x09471b21, 0xdf0e, 0x4c68, 0xb0, 0x08, 0xe0, 0x3f, 0xa0, 0xcd, 0x45, 0x21);
		
		/// <summary>
		/// DomainRole ITxComponent
		/// Description for Company.MyDslComponents.ITxContainerHasITxComponent.ITxComponent
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxContainerHasITxComponent/ITxComponent.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxContainerHasITxComponent/ITxComponent.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ITxContainer", PropertyDisplayNameKey="Company.MyDslComponents.ITxContainerHasITxComponent/ITxComponent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("09471b21-df0e-4c68-b008-e03fa0cd4521")]
		public virtual ITxComponent ITxComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ITxComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ITxComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ITxComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ITxComponent of a ITxContainer
		/// <summary>
		/// Gets a list of ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ITxComponent> GetITxComponent(ITxContainer element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ITxComponent>, ITxComponent>(element, ITxContainerDomainRoleId);
		}
		#endregion
		#region ITxContainer link accessor
		/// <summary>
		/// Get the list of ITxContainerHasITxComponent links to a ITxContainer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslComponents.ITxContainerHasITxComponent> GetLinksToITxComponent ( global::Company.MyDslComponents.ITxContainer iTxContainerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxContainerHasITxComponent>(iTxContainerInstance, global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxContainerDomainRoleId);
		}
		#endregion
		#region ITxComponent link accessor
		/// <summary>
		/// Get the ITxContainerHasITxComponent link to a ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslComponents.ITxContainerHasITxComponent GetLinkToITxContainer (global::Company.MyDslComponents.ITxComponent iTxComponentInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslComponents.ITxContainerHasITxComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxContainerHasITxComponent>(iTxComponentInstance, global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxComponentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ITxComponent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ITxContainerHasITxComponent instance accessors
		
		/// <summary>
		/// Get any ITxContainerHasITxComponent links between a given ITxContainer and a ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslComponents.ITxContainerHasITxComponent> GetLinks( global::Company.MyDslComponents.ITxContainer source, global::Company.MyDslComponents.ITxComponent target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslComponents.ITxContainerHasITxComponent> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslComponents.ITxContainerHasITxComponent>();
			global::System.Collections.Generic.IList<global::Company.MyDslComponents.ITxContainerHasITxComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxContainerHasITxComponent>(source, global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxContainerDomainRoleId);
			foreach ( global::Company.MyDslComponents.ITxContainerHasITxComponent link in links )
			{
				if ( target.Equals(link.ITxComponent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ITxContainerHasITxComponent link between a given ITxContainerand a ITxComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslComponents.ITxContainerHasITxComponent GetLink( global::Company.MyDslComponents.ITxContainer source, global::Company.MyDslComponents.ITxComponent target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslComponents.ITxContainerHasITxComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslComponents.ITxContainerHasITxComponent>(source, global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxContainerDomainRoleId);
			foreach ( global::Company.MyDslComponents.ITxContainerHasITxComponent link in links )
			{
				if ( target.Equals(link.ITxComponent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
