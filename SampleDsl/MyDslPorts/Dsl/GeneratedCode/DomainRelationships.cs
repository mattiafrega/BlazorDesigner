//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainRelationship Connection
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.Connection.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.Connection.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c5d5d773-9503-4d2e-afbb-9bdbe4396f38")]
	public partial class Connection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Connection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5d5d773, 0x9503, 0x4d2e, 0xaf, 0xbb, 0x9b, 0xdb, 0xe4, 0x39, 0x6f, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Connection link in the same Partition as the given OutPort
		/// </summary>
		/// <param name="source">OutPort to use as the source of the relationship.</param>
		/// <param name="target">InPort to use as the target of the relationship.</param>
		public Connection(OutPort source, InPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Connection.SourceDomainRoleId, source), new DslModeling::RoleAssignment(Connection.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Connection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Connection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Connection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Connection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x5372e23f, 0xe16a, 0x45df, 0xa3, 0xd0, 0x20, 0x71, 0x84, 0xd1, 0x89, 0xeb);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.Connection/Source.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.Connection/Source.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.MyDslPorts.Connection/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5372e23f-e16a-45df-a3d0-207184d189eb")]
		public virtual OutPort Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a InPort
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<OutPort> GetSources(InPort element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<OutPort>, OutPort>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x26441ae6, 0x1a74, 0x4c5b, 0x9a, 0x56, 0x5b, 0xf7, 0xa2, 0x3c, 0x9b, 0xd5);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.Connection/Target.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.Connection/Target.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.MyDslPorts.Connection/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("26441ae6-1a74-4c5b-9a56-5bf7a23c9bd5")]
		public virtual InPort Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a OutPort
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InPort> GetTargets(OutPort element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InPort>, InPort>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x06e44e73, 0xd205, 0x4812, 0xb4, 0x19, 0x43, 0xf7, 0x5f, 0x01, 0xe5, 0x5d);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.Connection/SourceRoleName.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.Connection/SourceRoleName.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("06e44e73-d205-4812-b419-43f75f01e55d")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Connection.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Connection, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Connection.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Connection.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Connection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Connection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0x7aa4e0cc, 0x1b9c, 0x429e, 0x8d, 0xed, 0x1e, 0x95, 0xfb, 0xb1, 0xec, 0x5f);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.Connection/TargetRoleName.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.Connection/TargetRoleName.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("7aa4e0cc-1b9c-429e-8ded-1e95fbb1ec5f")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Connection.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Connection, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Connection.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Connection.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Connection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Connection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Connection links to a OutPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.Connection> GetLinksToTargets ( global::Company.MyDslPorts.OutPort sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.Connection>(sourceInstance, global::Company.MyDslPorts.Connection.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Connection links to a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.Connection> GetLinksToSources ( global::Company.MyDslPorts.InPort targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.Connection>(targetInstance, global::Company.MyDslPorts.Connection.TargetDomainRoleId);
		}
		#endregion
		#region Connection instance accessors
		
		/// <summary>
		/// Get any Connection links between a given OutPort and a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.Connection> GetLinks( global::Company.MyDslPorts.OutPort source, global::Company.MyDslPorts.InPort target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslPorts.Connection> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslPorts.Connection>();
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.Connection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.Connection>(source, global::Company.MyDslPorts.Connection.SourceDomainRoleId);
			foreach ( global::Company.MyDslPorts.Connection link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Connection link between a given OutPortand a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslPorts.Connection GetLink( global::Company.MyDslPorts.OutPort source, global::Company.MyDslPorts.InPort target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.Connection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.Connection>(source, global::Company.MyDslPorts.Connection.SourceDomainRoleId);
			foreach ( global::Company.MyDslPorts.Connection link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainRelationship ComponentHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentHasPorts.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentHasPorts.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0547658b-cf04-46a2-8feb-ac383f21f69d")]
	public partial class ComponentHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0547658b, 0xcf04, 0x46a2, 0x8f, 0xeb, 0xac, 0x38, 0x3f, 0x21, 0xf6, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentHasPorts link in the same Partition as the given Component
		/// </summary>
		/// <param name="source">Component to use as the source of the relationship.</param>
		/// <param name="target">ComponentPort to use as the target of the relationship.</param>
		public ComponentHasPorts(Component source, ComponentPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentHasPorts.ComponentDomainRoleId, source), new DslModeling::RoleAssignment(ComponentHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Component domain role code
		
		/// <summary>
		/// Component domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentDomainRoleId = new global::System.Guid(0x1ed75e8e, 0x4c10, 0x46ac, 0xaf, 0xef, 0xc3, 0xaa, 0x1f, 0x9d, 0xf5, 0x4b);
		
		/// <summary>
		/// DomainRole Component
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentHasPorts/Component.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentHasPorts/Component.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="Company.MyDslPorts.ComponentHasPorts/Component.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1ed75e8e-4c10-46ac-afef-c3aa1f9df54b")]
		public virtual Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Component)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Component of a ComponentPort
		/// <summary>
		/// Gets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Component GetComponent(ComponentPort element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as Component;
		}
		
		/// <summary>
		/// Sets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponent(ComponentPort element, Component newComponent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newComponent);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x1b28de45, 0x6b82, 0x48e2, 0x81, 0x0d, 0xec, 0x1a, 0xdd, 0x71, 0x6e, 0x61);
		
		/// <summary>
		/// DomainRole Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentHasPorts/Port.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentHasPorts/Port.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Component", PropertyDisplayNameKey="Company.MyDslPorts.ComponentHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1b28de45-6b82-48e2-810d-ec1add716e61")]
		public virtual ComponentPort Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a Component
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ComponentPort> GetPorts(Component element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ComponentPort>, ComponentPort>(element, ComponentDomainRoleId);
		}
		#endregion
		#region Component link accessor
		/// <summary>
		/// Get the list of ComponentHasPorts links to a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.ComponentHasPorts> GetLinksToPorts ( global::Company.MyDslPorts.Component componentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentHasPorts>(componentInstance, global::Company.MyDslPorts.ComponentHasPorts.ComponentDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the ComponentHasPorts link to a ComponentPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslPorts.ComponentHasPorts GetLinkToComponent (global::Company.MyDslPorts.ComponentPort portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentHasPorts>(portInstance, global::Company.MyDslPorts.ComponentHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentHasPorts instance accessors
		
		/// <summary>
		/// Get any ComponentHasPorts links between a given Component and a ComponentPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.ComponentHasPorts> GetLinks( global::Company.MyDslPorts.Component source, global::Company.MyDslPorts.ComponentPort target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslPorts.ComponentHasPorts> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslPorts.ComponentHasPorts>();
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentHasPorts>(source, global::Company.MyDslPorts.ComponentHasPorts.ComponentDomainRoleId);
			foreach ( global::Company.MyDslPorts.ComponentHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentHasPorts link between a given Componentand a ComponentPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslPorts.ComponentHasPorts GetLink( global::Company.MyDslPorts.Component source, global::Company.MyDslPorts.ComponentPort target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentHasPorts>(source, global::Company.MyDslPorts.ComponentHasPorts.ComponentDomainRoleId);
			foreach ( global::Company.MyDslPorts.ComponentHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainRelationship ComponentModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentModelHasComments.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentModelHasComments.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0ac1c06a-4682-497f-9ba4-7ecfca8a5da3")]
	public partial class ComponentModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ac1c06a, 0x4682, 0x497f, 0x9b, 0xa4, 0x7e, 0xcf, 0xca, 0x8a, 0x5d, 0xa3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasComments link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ComponentModelHasComments(ComponentModel source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasComments.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x44a55fe6, 0x8a68, 0x41c7, 0x92, 0x77, 0x84, 0xc5, 0xf2, 0x2a, 0xc8, 0xbb);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentModelHasComments/ComponentModel.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentModelHasComments/ComponentModel.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Company.MyDslPorts.ComponentModelHasComments/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("44a55fe6-8a68-41c7-9277-84c5f22ac8bb")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Comment
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Comment element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newComponentModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x0f9eb3aa, 0x03c5, 0x4ec2, 0x8f, 0xbd, 0x97, 0xc4, 0xf8, 0x85, 0xcb, 0x52);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentModelHasComments/Comment.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentModelHasComments/Comment.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Company.MyDslPorts.ComponentModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0f9eb3aa-03c5-4ec2-8fbd-97c4f885cb52")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ComponentModel
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasComments links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.ComponentModelHasComments> GetLinksToComments ( global::Company.MyDslPorts.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComments>(componentModelInstance, global::Company.MyDslPorts.ComponentModelHasComments.ComponentModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ComponentModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslPorts.ComponentModelHasComments GetLinkToComponentModel (global::Company.MyDslPorts.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComments>(commentInstance, global::Company.MyDslPorts.ComponentModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasComments instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasComments links between a given ComponentModel and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.ComponentModelHasComments> GetLinks( global::Company.MyDslPorts.ComponentModel source, global::Company.MyDslPorts.Comment target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslPorts.ComponentModelHasComments> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslPorts.ComponentModelHasComments>();
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComments>(source, global::Company.MyDslPorts.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Company.MyDslPorts.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasComments link between a given ComponentModeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslPorts.ComponentModelHasComments GetLink( global::Company.MyDslPorts.ComponentModel source, global::Company.MyDslPorts.Comment target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComments>(source, global::Company.MyDslPorts.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Company.MyDslPorts.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslPorts
{
	/// <summary>
	/// DomainRelationship ComponentModelHasComponents
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentModelHasComponents.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentModelHasComponents.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslPorts.MyDslPortsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f50d2356-5faf-4d4e-aa25-834db94547fd")]
	public partial class ComponentModelHasComponents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasComponents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf50d2356, 0x5faf, 0x4d4e, 0xaa, 0x25, 0x83, 0x4d, 0xb9, 0x45, 0x47, 0xfd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasComponents link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Component to use as the target of the relationship.</param>
		public ComponentModelHasComponents(ComponentModel source, Component target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasComponents.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasComponents.ComponentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComponents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComponents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComponents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComponents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0xcc458b45, 0x5da0, 0x4257, 0x99, 0x82, 0xde, 0xcf, 0xc9, 0x41, 0x21, 0xf4);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentModelHasComponents/ComponentModel.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentModelHasComponents/ComponentModel.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Components", PropertyDisplayNameKey="Company.MyDslPorts.ComponentModelHasComponents/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc458b45-5da0-4257-9982-decfc94121f4")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Component
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Component element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ComponentDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Component element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ComponentDomainRoleId, newComponentModel);
		}
		#endregion
		#region Component domain role code
		
		/// <summary>
		/// Component domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentDomainRoleId = new global::System.Guid(0xa2d470ef, 0x81c8, 0x487e, 0xa1, 0xc3, 0x2a, 0x19, 0x0b, 0x24, 0xaf, 0x2f);
		
		/// <summary>
		/// DomainRole Component
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslPorts.ComponentModelHasComponents/Component.DisplayName", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslPorts.ComponentModelHasComponents/Component.Description", typeof(global::Company.MyDslPorts.MyDslPortsDomainModel), "Company.MyDslPorts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Company.MyDslPorts.ComponentModelHasComponents/Component.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a2d470ef-81c8-487e-a1c3-2a190b24af2f")]
		public virtual Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Component)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Components of a ComponentModel
		/// <summary>
		/// Gets a list of Components.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Component> GetComponents(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Component>, Component>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasComponents links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.ComponentModelHasComponents> GetLinksToComponents ( global::Company.MyDslPorts.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComponents>(componentModelInstance, global::Company.MyDslPorts.ComponentModelHasComponents.ComponentModelDomainRoleId);
		}
		#endregion
		#region Component link accessor
		/// <summary>
		/// Get the ComponentModelHasComponents link to a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslPorts.ComponentModelHasComponents GetLinkToComponentModel (global::Company.MyDslPorts.Component componentInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentModelHasComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComponents>(componentInstance, global::Company.MyDslPorts.ComponentModelHasComponents.ComponentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Component not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasComponents instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasComponents links between a given ComponentModel and a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslPorts.ComponentModelHasComponents> GetLinks( global::Company.MyDslPorts.ComponentModel source, global::Company.MyDslPorts.Component target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslPorts.ComponentModelHasComponents> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslPorts.ComponentModelHasComponents>();
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentModelHasComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComponents>(source, global::Company.MyDslPorts.ComponentModelHasComponents.ComponentModelDomainRoleId);
			foreach ( global::Company.MyDslPorts.ComponentModelHasComponents link in links )
			{
				if ( target.Equals(link.Component) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasComponents link between a given ComponentModeland a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslPorts.ComponentModelHasComponents GetLink( global::Company.MyDslPorts.ComponentModel source, global::Company.MyDslPorts.Component target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslPorts.ComponentModelHasComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslPorts.ComponentModelHasComponents>(source, global::Company.MyDslPorts.ComponentModelHasComponents.ComponentModelDomainRoleId);
			foreach ( global::Company.MyDslPorts.ComponentModelHasComponents link in links )
			{
				if ( target.Equals(link.Component) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
