//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxModel.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxModel.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d0496c9f-ce81-4d80-8eea-fd8d9e5b8006")]
	public partial class ITxModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0496c9f, 0xce81, 0x4d80, 0x8e, 0xea, 0xfd, 0x8d, 0x9e, 0x5b, 0x80, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ITxComponent opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ITxComponent.
		/// Description for Company.MyDslComponents.ITxModelHasITxComponent.ITxModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ITxComponent> ITxComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ITxComponent>, ITxComponent>(global::Company.MyDslComponents.ITxModelHasITxComponent.ITxModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslComponents.ITxComponent.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslComponents.ITxComponent sourceITxComponent1 = sourceElement as global::Company.MyDslComponents.ITxComponent;
			if (sourceITxComponent1 != null)
			{
				// Create link for path ITxModelHasITxComponent.ITxComponent
				this.ITxComponent.Add(sourceITxComponent1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslComponents.ITxComponent sourceITxComponent1 = sourceElement as global::Company.MyDslComponents.ITxComponent;
			if (sourceITxComponent1 != null)
			{
				// Delete link for path ITxModelHasITxComponent.ITxComponent
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslComponents.ITxModelHasITxComponent.GetLinks((global::Company.MyDslComponents.ITxModel)this, sourceITxComponent1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslComponents.ITxModelHasITxComponent.ITxModelDomainRoleId, global::Company.MyDslComponents.ITxModelHasITxComponent.ITxComponentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxComponent
	/// Description for Company.MyDslComponents.ITxComponent
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxComponent.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxComponent.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("5fa966a9-84fb-467e-9189-06278eaecfba")]
	public abstract partial class ITxComponent : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5fa966a9, 0x84fb, 0x467e, 0x91, 0x89, 0x06, 0x27, 0x8e, 0xae, 0xcf, 0xba);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ITxComponent(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x777a72ba, 0x9429, 0x4f9f, 0x8d, 0x75, 0x85, 0x1d, 0xd6, 0xca, 0x77, 0x07);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDslComponents.ITxComponent.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxComponent/Name.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxComponent/Name.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("777a72ba-9429-4f9f-8d75-851dd6ca7707")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ITxComponent.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ITxComponent, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ITxComponent.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ITxComponent.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ITxComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ITxComponent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ITxModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ITxModel.
		/// Description for Company.MyDslComponents.ITxModelHasITxComponent.ITxComponent
		/// </summary>
		public virtual ITxModel ITxModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslComponents.ITxModelHasITxComponent.ITxComponentDomainRoleId) as ITxModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslComponents.ITxModelHasITxComponent.ITxComponentDomainRoleId, value);
			}
		}
		#endregion
		#region ITxContainer opposite domain role accessor
		/// <summary>
		/// Gets or sets ITxContainer.
		/// Description for Company.MyDslComponents.ITxContainerHasITxComponent.ITxComponent
		/// </summary>
		public virtual ITxContainer ITxContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxComponentDomainRoleId) as ITxContainer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxComponentDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxView
	/// Description for Company.MyDslComponents.ITxView
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxView.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxView.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("216871ad-163e-4f6f-9826-66287ae3c1fe")]
	public partial class ITxView : ITxContainer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxView domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x216871ad, 0x163e, 0x4f6f, 0x98, 0x26, 0x66, 0x28, 0x7a, 0xe3, 0xc1, 0xfe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxView(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxView(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxPanel
	/// Description for Company.MyDslComponents.ITxPanel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxPanel.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxPanel.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("61874ad0-26d4-4ae7-a3e0-7c4b246424a0")]
	public partial class ITxPanel : ITxContainer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxPanel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x61874ad0, 0x26d4, 0x4ae7, 0xa3, 0xe0, 0x7c, 0x4b, 0x24, 0x64, 0x24, 0xa0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxPanel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxPanel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxContainer
	/// Description for Company.MyDslComponents.ITxContainer
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxContainer.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxContainer.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("75c7370e-5033-4389-a6ef-a365805c18c9")]
	public abstract partial class ITxContainer : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxContainer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x75c7370e, 0x5033, 0x4389, 0xa6, 0xef, 0xa3, 0x65, 0x80, 0x5c, 0x18, 0xc9);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ITxContainer(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ITxComponent opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ITxComponent.
		/// Description for Company.MyDslComponents.ITxContainerHasITxComponent.ITxContainer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ITxComponent> ITxComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ITxComponent>, ITxComponent>(global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxContainerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslComponents.ITxComponent.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslComponents.ITxComponent sourceITxComponent1 = sourceElement as global::Company.MyDslComponents.ITxComponent;
			if (sourceITxComponent1 != null)
			{
				// Create link for path ITxContainerHasITxComponent.ITxComponent
				this.ITxComponent.Add(sourceITxComponent1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslComponents.ITxComponent sourceITxComponent1 = sourceElement as global::Company.MyDslComponents.ITxComponent;
			if (sourceITxComponent1 != null)
			{
				// Delete link for path ITxContainerHasITxComponent.ITxComponent
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslComponents.ITxContainerHasITxComponent.GetLinks((global::Company.MyDslComponents.ITxContainer)this, sourceITxComponent1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxContainerDomainRoleId, global::Company.MyDslComponents.ITxContainerHasITxComponent.ITxComponentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxTextbox
	/// Description for Company.MyDslComponents.ITxTextbox
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxTextbox.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxTextbox.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("748d96cf-6a07-410d-a1a3-4cfe2df90e70")]
	public partial class ITxTextbox : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxTextbox domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x748d96cf, 0x6a07, 0x410d, 0xa1, 0xa3, 0x4c, 0xfe, 0x2d, 0xf9, 0x0e, 0x70);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxTextbox(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxTextbox(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xf1bc70fb, 0xf5b9, 0x4ae3, 0xa0, 0x5c, 0x90, 0xa0, 0xb5, 0x21, 0xeb, 0x6c);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MyDslComponents.ITxTextbox.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxTextbox/Text.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxTextbox/Text.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f1bc70fb-f5b9-4ae3-a05c-90a0b521eb6c")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ITxTextbox.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<ITxTextbox, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ITxTextbox.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ITxTextbox.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ITxTextbox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ITxTextbox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxButton
	/// Description for Company.MyDslComponents.ITxButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxButton.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxButton.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d6080ae1-53c4-4fd1-b702-13d59675d06d")]
	public partial class ITxButton : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd6080ae1, 0x53c4, 0x4fd1, 0xb7, 0x02, 0x13, 0xd5, 0x96, 0x75, 0xd0, 0x6d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxButton(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxButton(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x90c7c4a2, 0xdfb8, 0x45a4, 0x85, 0x85, 0x4d, 0x12, 0xb7, 0x57, 0x20, 0x44);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MyDslComponents.ITxButton.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxButton/Text.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxButton/Text.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("90c7c4a2-dfb8-45a4-8585-4d12b7572044")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ITxButton.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<ITxButton, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ITxButton.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ITxButton.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ITxButton element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ITxButton element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass ITxGauge
	/// Description for Company.MyDslComponents.ITxGauge
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxGauge.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.ITxGauge.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5f9765f2-2c0c-4cf6-8a39-47e770baab96")]
	public partial class ITxGauge : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ITxGauge domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5f9765f2, 0x2c0c, 0x4cf6, 0x8a, 0x39, 0x47, 0xe7, 0x70, 0xba, 0xab, 0x96);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxGauge(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ITxGauge(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RangeStart domain property code
		
		/// <summary>
		/// RangeStart domain property Id.
		/// </summary>
		public static readonly global::System.Guid RangeStartDomainPropertyId = new global::System.Guid(0xc1f7337e, 0xc60c, 0x40a3, 0x90, 0x6a, 0xb3, 0x62, 0xef, 0xd3, 0x18, 0xa0);
		
		/// <summary>
		/// Storage for RangeStart
		/// </summary>
		private global::System.Double rangeStartPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RangeStart domain property.
		/// Description for Company.MyDslComponents.ITxGauge.Range Start
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxGauge/RangeStart.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxGauge/RangeStart.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c1f7337e-c60c-40a3-906a-b362efd318a0")]
		public global::System.Double RangeStart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rangeStartPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RangeStartPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ITxGauge.RangeStart domain property.
		/// </summary>
		internal sealed partial class RangeStartPropertyHandler : DslModeling::DomainPropertyValueHandler<ITxGauge, global::System.Double>
		{
			private RangeStartPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ITxGauge.RangeStart domain property value handler.
			/// </summary>
			public static readonly RangeStartPropertyHandler Instance = new RangeStartPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ITxGauge.RangeStart domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RangeStartDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(ITxGauge element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rangeStartPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ITxGauge element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.rangeStartPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RangeEnd domain property code
		
		/// <summary>
		/// RangeEnd domain property Id.
		/// </summary>
		public static readonly global::System.Guid RangeEndDomainPropertyId = new global::System.Guid(0xa7d15316, 0x2950, 0x46e2, 0xa4, 0x0a, 0xa3, 0x1d, 0xf8, 0xdc, 0xba, 0x5a);
		
		/// <summary>
		/// Storage for RangeEnd
		/// </summary>
		private global::System.Double rangeEndPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RangeEnd domain property.
		/// Description for Company.MyDslComponents.ITxGauge.Range End
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.ITxGauge/RangeEnd.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.ITxGauge/RangeEnd.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a7d15316-2950-46e2-a40a-a31df8dcba5a")]
		public global::System.Double RangeEnd
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rangeEndPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RangeEndPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ITxGauge.RangeEnd domain property.
		/// </summary>
		internal sealed partial class RangeEndPropertyHandler : DslModeling::DomainPropertyValueHandler<ITxGauge, global::System.Double>
		{
			private RangeEndPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ITxGauge.RangeEnd domain property value handler.
			/// </summary>
			public static readonly RangeEndPropertyHandler Instance = new RangeEndPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ITxGauge.RangeEnd domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RangeEndDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(ITxGauge element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rangeEndPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ITxGauge element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.rangeEndPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass FetchData
	/// Description for Company.MyDslComponents.FetchData
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.FetchData.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.FetchData.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("541f6787-5773-45c1-b138-1cd03234803e")]
	public partial class FetchData : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FetchData domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x541f6787, 0x5773, 0x45c1, 0xb1, 0x38, 0x1c, 0xd0, 0x32, 0x34, 0x80, 0x3e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FetchData(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FetchData(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass Counter
	/// Description for Company.MyDslComponents.Counter
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.Counter.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.Counter.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("76d94e4c-8f82-4886-a5f8-fbee7f765849")]
	public partial class Counter : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Counter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76d94e4c, 0x8f82, 0x4886, 0xa5, 0xf8, 0xfb, 0xee, 0x7f, 0x76, 0x58, 0x49);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Counter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Counter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass SurveyPrompt
	/// Description for Company.MyDslComponents.SurveyPrompt
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.SurveyPrompt.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.SurveyPrompt.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d011dc29-ddb4-4672-bf7a-77c5fe7c521e")]
	public partial class SurveyPrompt : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SurveyPrompt domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd011dc29, 0xddb4, 0x4672, 0xbf, 0x7a, 0x77, 0xc5, 0xfe, 0x7c, 0x52, 0x1e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SurveyPrompt(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SurveyPrompt(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x1e4c625f, 0x5f05, 0x401d, 0xbf, 0xa9, 0xc1, 0x57, 0x0b, 0x8c, 0x1d, 0xa0);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MyDslComponents.SurveyPrompt.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.SurveyPrompt/Text.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.SurveyPrompt/Text.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1e4c625f-5f05-401d-bfa9-c1570b8c1da0")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SurveyPrompt.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<SurveyPrompt, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SurveyPrompt.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SurveyPrompt.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SurveyPrompt element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SurveyPrompt element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MyDslComponents
{
	/// <summary>
	/// DomainClass InputTypeText
	/// Description for Company.MyDslComponents.InputTypeText
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslComponents.InputTypeText.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslComponents.InputTypeText.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("56632c78-d03b-4f28-ac35-5976a7e1f094")]
	public partial class InputTypeText : ITxComponent
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InputTypeText domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56632c78, 0xd03b, 0x4f28, 0xac, 0x35, 0x59, 0x76, 0xa7, 0xe1, 0xf0, 0x94);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InputTypeText(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InputTypeText(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xb625a6c9, 0x5259, 0x4197, 0xa9, 0xe7, 0xa8, 0xa3, 0x5c, 0xa4, 0x63, 0x75);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MyDslComponents.InputTypeText.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslComponents.InputTypeText/Text.DisplayName", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslComponents.InputTypeText/Text.Description", typeof(global::Company.MyDslComponents.MyDslComponentsDomainModel), "Company.MyDslComponents.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b625a6c9-5259-4197-a9e7-a8a35ca46375")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InputTypeText.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<InputTypeText, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InputTypeText.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InputTypeText.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InputTypeText element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InputTypeText element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
