//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslInheritance
{
	/// <summary>
	/// DomainClass ExampleModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslInheritance.ExampleModel.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslInheritance.ExampleModel.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f6b74547-f088-4ba3-8096-d17cabb1db56")]
	public partial class ExampleModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExampleModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6b74547, 0xf088, 0x4ba3, 0x80, 0x96, 0xd1, 0x7c, 0xab, 0xb1, 0xdb, 0x56);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Dog opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Dog.
		/// Description for Company.MyDslInheritance.ExampleModelHasDog.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Dog> Dog
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Dog>, Dog>(global::Company.MyDslInheritance.ExampleModelHasDog.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region Cat opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Cat.
		/// Description for Company.MyDslInheritance.ExampleModelHasCat.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Cat> Cat
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Cat>, Cat>(global::Company.MyDslInheritance.ExampleModelHasCat.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslInheritance.Dog.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MyDslInheritance.Cat.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MyDslInheritance.Dog sourceDog1 = sourceElement as global::Company.MyDslInheritance.Dog;
			if (sourceDog1 != null)
			{
				// Create link for path ExampleModelHasDog.Dog
				this.Dog.Add(sourceDog1);

				return;
			}
				
			global::Company.MyDslInheritance.Cat sourceCat2 = sourceElement as global::Company.MyDslInheritance.Cat;
			if (sourceCat2 != null)
			{
				// Create link for path ExampleModelHasCat.Cat
				this.Cat.Add(sourceCat2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MyDslInheritance.Dog sourceDog1 = sourceElement as global::Company.MyDslInheritance.Dog;
			if (sourceDog1 != null)
			{
				// Delete link for path ExampleModelHasDog.Dog
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslInheritance.ExampleModelHasDog.GetLinks((global::Company.MyDslInheritance.ExampleModel)this, sourceDog1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslInheritance.ExampleModelHasDog.ExampleModelDomainRoleId, global::Company.MyDslInheritance.ExampleModelHasDog.DogDomainRoleId);
				}

				return;
			}
				
			global::Company.MyDslInheritance.Cat sourceCat2 = sourceElement as global::Company.MyDslInheritance.Cat;
			if (sourceCat2 != null)
			{
				// Delete link for path ExampleModelHasCat.Cat
				
				foreach (DslModeling::ElementLink link in global::Company.MyDslInheritance.ExampleModelHasCat.GetLinks((global::Company.MyDslInheritance.ExampleModel)this, sourceCat2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MyDslInheritance.ExampleModelHasCat.ExampleModelDomainRoleId, global::Company.MyDslInheritance.ExampleModelHasCat.CatDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MyDslInheritance
{
	/// <summary>
	/// DomainClass Animal
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslInheritance.Animal.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslInheritance.Animal.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("8532c6fc-75b8-4d18-b832-a2d1953abd43")]
	public abstract partial class Animal : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Animal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8532c6fc, 0x75b8, 0x4d18, 0xb8, 0x32, 0xa2, 0xd1, 0x95, 0x3a, 0xbd, 0x43);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Animal(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x61746f8c, 0xe6c6, 0x4e8a, 0x80, 0x7c, 0xe7, 0x6a, 0x17, 0x97, 0x63, 0x23);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MyDslInheritance.Animal.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslInheritance.Animal/Name.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslInheritance.Animal/Name.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("61746f8c-e6c6-4e8a-807c-e76a17976323")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Animal.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Animal, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Animal.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Animal.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Animal element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Animal element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AnimalProperty domain property code
		
		/// <summary>
		/// AnimalProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid AnimalPropertyDomainPropertyId = new global::System.Guid(0x66b5d1ee, 0x37ac, 0x4931, 0xa0, 0xfe, 0x22, 0xad, 0x7b, 0xec, 0x14, 0xa2);
		
		/// <summary>
		/// Storage for AnimalProperty
		/// </summary>
		private global::System.String animalPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of AnimalProperty domain property.
		/// Description for Company.MyDslInheritance.Animal.Animal Property
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslInheritance.Animal/AnimalProperty.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslInheritance.Animal/AnimalProperty.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("66b5d1ee-37ac-4931-a0fe-22ad7bec14a2")]
		public global::System.String AnimalProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return animalPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AnimalPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Animal.AnimalProperty domain property.
		/// </summary>
		internal sealed partial class AnimalPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<Animal, global::System.String>
		{
			private AnimalPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Animal.AnimalProperty domain property value handler.
			/// </summary>
			public static readonly AnimalPropertyPropertyHandler Instance = new AnimalPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Animal.AnimalProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AnimalPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Animal element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.animalPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Animal element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.animalPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MyDslInheritance
{
	/// <summary>
	/// DomainClass Dog
	/// Description for Company.MyDslInheritance.Dog
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslInheritance.Dog.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslInheritance.Dog.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("03026f0b-c4a8-4ca7-803c-e83f3b99dcb1")]
	public partial class Dog : Animal
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Dog domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x03026f0b, 0xc4a8, 0x4ca7, 0x80, 0x3c, 0xe8, 0x3f, 0x3b, 0x99, 0xdc, 0xb1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Dog(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Dog(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DogProperty domain property code
		
		/// <summary>
		/// DogProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid DogPropertyDomainPropertyId = new global::System.Guid(0x779546d2, 0xf38c, 0x467f, 0xb8, 0x0d, 0xfb, 0x4c, 0x76, 0x73, 0x25, 0x54);
		
		/// <summary>
		/// Storage for DogProperty
		/// </summary>
		private global::System.String dogPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DogProperty domain property.
		/// Description for Company.MyDslInheritance.Dog.Dog Property
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslInheritance.Dog/DogProperty.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslInheritance.Dog/DogProperty.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("779546d2-f38c-467f-b80d-fb4c76732554")]
		public global::System.String DogProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dogPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DogPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Dog.DogProperty domain property.
		/// </summary>
		internal sealed partial class DogPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<Dog, global::System.String>
		{
			private DogPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Dog.DogProperty domain property value handler.
			/// </summary>
			public static readonly DogPropertyPropertyHandler Instance = new DogPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Dog.DogProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DogPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Dog element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dogPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Dog element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dogPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for Company.MyDslInheritance.ExampleModelHasDog.Dog
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslInheritance.ExampleModelHasDog.DogDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslInheritance.ExampleModelHasDog.DogDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MyDslInheritance
{
	/// <summary>
	/// DomainClass Cat
	/// Description for Company.MyDslInheritance.Cat
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslInheritance.Cat.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslInheritance.Cat.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9105785b-8c5f-4691-9ecc-0eba59ca3dd1")]
	public partial class Cat : Animal
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Cat domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9105785b, 0x8c5f, 0x4691, 0x9e, 0xcc, 0x0e, 0xba, 0x59, 0xca, 0x3d, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Cat(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Cat(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CatProperty domain property code
		
		/// <summary>
		/// CatProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid CatPropertyDomainPropertyId = new global::System.Guid(0x337c210d, 0xb95d, 0x4fac, 0xbd, 0xbb, 0x77, 0x0b, 0x35, 0xbf, 0x92, 0xa5);
		
		/// <summary>
		/// Storage for CatProperty
		/// </summary>
		private global::System.String catPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CatProperty domain property.
		/// Description for Company.MyDslInheritance.Cat.Cat Property
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslInheritance.Cat/CatProperty.DisplayName", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslInheritance.Cat/CatProperty.Description", typeof(global::Company.MyDslInheritance.MyDslInheritanceDomainModel), "Company.MyDslInheritance.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("337c210d-b95d-4fac-bdbb-770b35bf92a5")]
		public global::System.String CatProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return catPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CatPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Cat.CatProperty domain property.
		/// </summary>
		internal sealed partial class CatPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<Cat, global::System.String>
		{
			private CatPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Cat.CatProperty domain property value handler.
			/// </summary>
			public static readonly CatPropertyPropertyHandler Instance = new CatPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Cat.CatProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CatPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Cat element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.catPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Cat element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.catPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for Company.MyDslInheritance.ExampleModelHasCat.Cat
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MyDslInheritance.ExampleModelHasCat.CatDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MyDslInheritance.ExampleModelHasCat.CatDomainRoleId, value);
			}
		}
		#endregion
	}
}
