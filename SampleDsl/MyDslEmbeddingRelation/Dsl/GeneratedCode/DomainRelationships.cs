//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MyDslEmbeddingRelation
{
	/// <summary>
	/// DomainRelationship ExampleModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.ExampleModelHasElements.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.ExampleModelHasElements.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("238fa424-0e17-413c-a758-e24bd0d9a8d9")]
	public partial class ExampleModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x238fa424, 0x0e17, 0x413c, 0xa7, 0x58, 0xe2, 0x4b, 0xd0, 0xd9, 0xa8, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasElements link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">MyPanel to use as the target of the relationship.</param>
		public ExampleModelHasElements(ExampleModel source, MyPanel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasElements.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0xf2b553c9, 0x3009, 0x4383, 0xb1, 0xd4, 0x81, 0x77, 0xab, 0xfc, 0xe1, 0x44);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.ExampleModelHasElements/ExampleModel.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.ExampleModelHasElements/ExampleModel.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.MyDslEmbeddingRelation.ExampleModelHasElements/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f2b553c9-3009-4383-b1d4-8177abfce144")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a MyPanel
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(MyPanel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(MyPanel element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newExampleModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xf02409dd, 0x0cdb, 0x4d92, 0xab, 0xc6, 0xc7, 0x05, 0xbb, 0x71, 0x6f, 0x09);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.ExampleModelHasElements/Element.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.ExampleModelHasElements/Element.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.MyDslEmbeddingRelation.ExampleModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f02409dd-0cdb-4d92-abc6-c705bb716f09")]
		public virtual MyPanel Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a ExampleModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyPanel> GetElements(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyPanel>, MyPanel>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasElements links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements> GetLinksToElements ( global::Company.MyDslEmbeddingRelation.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements>(exampleModelInstance, global::Company.MyDslEmbeddingRelation.ExampleModelHasElements.ExampleModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ExampleModelHasElements link to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslEmbeddingRelation.ExampleModelHasElements GetLinkToExampleModel (global::Company.MyDslEmbeddingRelation.MyPanel elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements>(elementInstance, global::Company.MyDslEmbeddingRelation.ExampleModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasElements instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasElements links between a given ExampleModel and a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements> GetLinks( global::Company.MyDslEmbeddingRelation.ExampleModel source, global::Company.MyDslEmbeddingRelation.MyPanel target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements>(source, global::Company.MyDslEmbeddingRelation.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslEmbeddingRelation.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasElements link between a given ExampleModeland a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslEmbeddingRelation.ExampleModelHasElements GetLink( global::Company.MyDslEmbeddingRelation.ExampleModel source, global::Company.MyDslEmbeddingRelation.MyPanel target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasElements>(source, global::Company.MyDslEmbeddingRelation.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslEmbeddingRelation.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslEmbeddingRelation
{
	/// <summary>
	/// DomainRelationship MyPanelHasMyEmbeddedButton
	/// Description for Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5350a304-40a0-4f1e-b76d-b315f253bd80")]
	public partial class MyPanelHasMyEmbeddedButton : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MyPanelHasMyEmbeddedButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5350a304, 0x40a0, 0x4f1e, 0xb7, 0x6d, 0xb3, 0x15, 0xf2, 0x53, 0xbd, 0x80);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MyPanelHasMyEmbeddedButton link in the same Partition as the given MyPanel
		/// </summary>
		/// <param name="source">MyPanel to use as the source of the relationship.</param>
		/// <param name="target">MyEmbeddedButton to use as the target of the relationship.</param>
		public MyPanelHasMyEmbeddedButton(MyPanel source, MyEmbeddedButton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MyPanelHasMyEmbeddedButton.MyPanelDomainRoleId, source), new DslModeling::RoleAssignment(MyPanelHasMyEmbeddedButton.MyEmbeddedButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelHasMyEmbeddedButton(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelHasMyEmbeddedButton(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MyPanelHasMyEmbeddedButton(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MyPanelHasMyEmbeddedButton(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MyPanel domain role code
		
		/// <summary>
		/// MyPanel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyPanelDomainRoleId = new global::System.Guid(0x6974a466, 0x33cb, 0x490c, 0xac, 0xe9, 0x09, 0x25, 0x66, 0x6c, 0x6c, 0x0c);
		
		/// <summary>
		/// DomainRole MyPanel
		/// Description for
		/// Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.MyPanel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton/MyPanel.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton/MyPanel.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyEmbeddedButton", PropertyDisplayNameKey="Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton/MyPanel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6974a466-33cb-490c-ace9-0925666c6c0c")]
		public virtual MyPanel MyPanel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyPanel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyPanelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyPanelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyPanel of a MyEmbeddedButton
		/// <summary>
		/// Gets MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MyPanel GetMyPanel(MyEmbeddedButton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MyEmbeddedButtonDomainRoleId) as MyPanel;
		}
		
		/// <summary>
		/// Sets MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMyPanel(MyEmbeddedButton element, MyPanel newMyPanel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MyEmbeddedButtonDomainRoleId, newMyPanel);
		}
		#endregion
		#region MyEmbeddedButton domain role code
		
		/// <summary>
		/// MyEmbeddedButton domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyEmbeddedButtonDomainRoleId = new global::System.Guid(0xbd94a0bb, 0xaec2, 0x49e8, 0x87, 0xdf, 0xe1, 0xd8, 0x3a, 0x6e, 0xd2, 0xea);
		
		/// <summary>
		/// DomainRole MyEmbeddedButton
		/// Description for
		/// Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.MyEmbeddedButton
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton/MyEmbeddedButton.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton/MyEmbeddedButton.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MyPanel", PropertyDisplayNameKey="Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton/MyEmbeddedButton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bd94a0bb-aec2-49e8-87df-e1d83a6ed2ea")]
		public virtual MyEmbeddedButton MyEmbeddedButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyEmbeddedButton)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyEmbeddedButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyEmbeddedButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyEmbeddedButton of a MyPanel
		/// <summary>
		/// Gets a list of MyEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyEmbeddedButton> GetMyEmbeddedButton(MyPanel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyEmbeddedButton>, MyEmbeddedButton>(element, MyPanelDomainRoleId);
		}
		#endregion
		#region MyPanel link accessor
		/// <summary>
		/// Get the list of MyPanelHasMyEmbeddedButton links to a MyPanel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton> GetLinksToMyEmbeddedButton ( global::Company.MyDslEmbeddingRelation.MyPanel myPanelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton>(myPanelInstance, global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.MyPanelDomainRoleId);
		}
		#endregion
		#region MyEmbeddedButton link accessor
		/// <summary>
		/// Get the MyPanelHasMyEmbeddedButton link to a MyEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton GetLinkToMyPanel (global::Company.MyDslEmbeddingRelation.MyEmbeddedButton myEmbeddedButtonInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton>(myEmbeddedButtonInstance, global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.MyEmbeddedButtonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MyEmbeddedButton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MyPanelHasMyEmbeddedButton instance accessors
		
		/// <summary>
		/// Get any MyPanelHasMyEmbeddedButton links between a given MyPanel and a MyEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton> GetLinks( global::Company.MyDslEmbeddingRelation.MyPanel source, global::Company.MyDslEmbeddingRelation.MyEmbeddedButton target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton>();
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton>(source, global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.MyPanelDomainRoleId);
			foreach ( global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton link in links )
			{
				if ( target.Equals(link.MyEmbeddedButton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MyPanelHasMyEmbeddedButton link between a given MyPaneland a MyEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton GetLink( global::Company.MyDslEmbeddingRelation.MyPanel source, global::Company.MyDslEmbeddingRelation.MyEmbeddedButton target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton>(source, global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton.MyPanelDomainRoleId);
			foreach ( global::Company.MyDslEmbeddingRelation.MyPanelHasMyEmbeddedButton link in links )
			{
				if ( target.Equals(link.MyEmbeddedButton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MyDslEmbeddingRelation
{
	/// <summary>
	/// DomainRelationship ExampleModelHasMyNotEmbeddedButton
	/// Description for
	/// Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("28f9bbc7-11e1-41a0-9fbc-75d4ae0bbfdf")]
	public partial class ExampleModelHasMyNotEmbeddedButton : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasMyNotEmbeddedButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x28f9bbc7, 0x11e1, 0x41a0, 0x9f, 0xbc, 0x75, 0xd4, 0xae, 0x0b, 0xbf, 0xdf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasMyNotEmbeddedButton link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">MyNotEmbeddedButton to use as the target of the relationship.</param>
		public ExampleModelHasMyNotEmbeddedButton(ExampleModel source, MyNotEmbeddedButton target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasMyNotEmbeddedButton.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasMyNotEmbeddedButton.MyNotEmbeddedButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasMyNotEmbeddedButton(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasMyNotEmbeddedButton(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasMyNotEmbeddedButton(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasMyNotEmbeddedButton(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0x342f2d53, 0xc2e6, 0x4477, 0x9b, 0x82, 0x80, 0x71, 0x08, 0xfb, 0x5e, 0x65);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// Description for
		/// Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton/ExampleModel.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton/ExampleModel.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MyNotEmbeddedButton", PropertyDisplayNameKey="Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("342f2d53-c2e6-4477-9b82-807108fb5e65")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a MyNotEmbeddedButton
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(MyNotEmbeddedButton element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MyNotEmbeddedButtonDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(MyNotEmbeddedButton element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MyNotEmbeddedButtonDomainRoleId, newExampleModel);
		}
		#endregion
		#region MyNotEmbeddedButton domain role code
		
		/// <summary>
		/// MyNotEmbeddedButton domain role Id.
		/// </summary>
		public static readonly global::System.Guid MyNotEmbeddedButtonDomainRoleId = new global::System.Guid(0x789500af, 0x2474, 0x42e7, 0x8c, 0x26, 0x1a, 0xaa, 0xe1, 0xd7, 0x65, 0x63);
		
		/// <summary>
		/// DomainRole MyNotEmbeddedButton
		/// Description for
		/// Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.MyNotEmbeddedButton
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton/MyNotEmbeddedButton.DisplayName", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton/MyNotEmbeddedButton.Description", typeof(global::Company.MyDslEmbeddingRelation.MyDslEmbeddingRelationDomainModel), "Company.MyDslEmbeddingRelation.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton/MyNotEmbeddedButton.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("789500af-2474-42e7-8c26-1aaae1d76563")]
		public virtual MyNotEmbeddedButton MyNotEmbeddedButton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MyNotEmbeddedButton)DslModeling::DomainRoleInfo.GetRolePlayer(this, MyNotEmbeddedButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MyNotEmbeddedButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MyNotEmbeddedButton of a ExampleModel
		/// <summary>
		/// Gets a list of MyNotEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MyNotEmbeddedButton> GetMyNotEmbeddedButton(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MyNotEmbeddedButton>, MyNotEmbeddedButton>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasMyNotEmbeddedButton links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton> GetLinksToMyNotEmbeddedButton ( global::Company.MyDslEmbeddingRelation.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton>(exampleModelInstance, global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.ExampleModelDomainRoleId);
		}
		#endregion
		#region MyNotEmbeddedButton link accessor
		/// <summary>
		/// Get the ExampleModelHasMyNotEmbeddedButton link to a MyNotEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton GetLinkToExampleModel (global::Company.MyDslEmbeddingRelation.MyNotEmbeddedButton myNotEmbeddedButtonInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton>(myNotEmbeddedButtonInstance, global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.MyNotEmbeddedButtonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MyNotEmbeddedButton not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasMyNotEmbeddedButton instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasMyNotEmbeddedButton links between a given ExampleModel and a MyNotEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton> GetLinks( global::Company.MyDslEmbeddingRelation.ExampleModel source, global::Company.MyDslEmbeddingRelation.MyNotEmbeddedButton target )
		{
			global::System.Collections.Generic.List<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton> outLinks = new global::System.Collections.Generic.List<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton>();
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton>(source, global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton link in links )
			{
				if ( target.Equals(link.MyNotEmbeddedButton) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasMyNotEmbeddedButton link between a given ExampleModeland a MyNotEmbeddedButton.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton GetLink( global::Company.MyDslEmbeddingRelation.ExampleModel source, global::Company.MyDslEmbeddingRelation.MyNotEmbeddedButton target )
		{
			global::System.Collections.Generic.IList<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton>(source, global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton.ExampleModelDomainRoleId);
			foreach ( global::Company.MyDslEmbeddingRelation.ExampleModelHasMyNotEmbeddedButton link in links )
			{
				if ( target.Equals(link.MyNotEmbeddedButton) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
